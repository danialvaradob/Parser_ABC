/* The following code was generated by JFlex 1.6.1 */

 /* Secciï¿½n de declaraciones de JFlex */
package scanner;
import java_cup.runtime.*;
import parser.sym;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/SegundoSemestre2018/Compiladores e Interpretes/Proyectos/Proyecto2/Parser_ABC/Parser_ABC/src/scanner/ScannerABC.flex</tt>
 */
public class ScannerABC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\4\1\2\1\7\1\7\1\3\22\0\1\1\1\64"+
    "\1\72\1\65\1\64\1\64\1\64\1\0\1\26\1\31\1\27\1\63"+
    "\1\56\1\13\1\11\1\33\1\10\1\6\10\6\1\60\1\57\1\25"+
    "\1\24\1\23\1\0\1\64\1\14\1\34\1\46\1\16\1\12\1\40"+
    "\1\44\1\53\1\42\1\5\1\50\1\43\1\54\1\15\1\17\1\45"+
    "\1\5\1\20\1\52\1\21\1\5\1\55\1\37\1\22\1\35\1\5"+
    "\1\61\1\0\1\62\1\64\1\5\1\0\1\14\1\34\1\46\1\16"+
    "\1\36\1\40\1\44\1\53\1\42\1\5\1\50\1\43\1\54\1\15"+
    "\1\17\1\45\1\5\1\20\1\52\1\21\1\5\1\55\1\37\1\22"+
    "\1\35\1\5\1\32\1\4\1\30\7\0\1\7\33\0\1\71\30\0"+
    "\1\67\4\0\1\67\2\0\1\66\1\70\36\0\1\66\1\70\114\0"+
    "\2\41\115\0\1\51\u1ea8\0\1\7\1\7\u0100\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\1\4\2\5\1\6\1\4"+
    "\1\7\7\4\1\10\1\11\1\10\1\12\1\13\1\14"+
    "\1\15\1\13\3\4\1\2\5\4\1\2\2\4\1\16"+
    "\1\17\1\20\1\6\1\13\1\21\3\2\1\22\1\4"+
    "\1\21\2\0\1\23\1\24\5\0\1\24\1\4\1\13"+
    "\2\4\1\0\2\4\1\0\1\10\3\4\1\6\1\10"+
    "\1\15\2\0\1\23\2\25\2\4\1\0\2\4\1\0"+
    "\1\4\1\26\1\27\1\26\1\27\5\4\1\0\2\4"+
    "\1\13\4\21\2\0\1\30\2\22\1\31\1\32\1\0"+
    "\1\33\2\26\5\4\1\0\1\15\3\0\1\23\1\4"+
    "\1\0\2\4\1\0\1\34\1\0\1\34\6\4\1\35"+
    "\1\21\1\22\1\36\1\32\1\23\1\0\1\32\2\4"+
    "\1\37\1\25\2\0\1\23\1\0\2\4\1\0\1\4"+
    "\1\0\2\4\1\0\1\4\1\21\1\0\1\40\1\4"+
    "\1\0\1\23\1\0\1\23\2\41\1\0\1\4\2\42"+
    "\1\21\2\40\1\0\1\23\3\0\1\23\1\4\1\21"+
    "\2\0\1\40\1\0\1\23\1\0\1\23\1\43\1\21"+
    "\1\0\2\40\2\0\1\23\1\21\7\0\1\23\1\0"+
    "\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\73\0\261\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\73\0\u0426\0\u0461\0\u049c\0\73"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\73\0\73"+
    "\0\u0811\0\73\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0162\0\u0bfc\0\u0c37\0\73\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\354\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\73\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\73\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\73\0\u11bf\0\354\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u0b10\0\u1620\0\u165b"+
    "\0\354\0\73\0\354\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\73\0\u1a46\0\354\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\354\0\u1be3\0\u1c1e\0\u0b10"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1ccf\0\u1d0a\0\u1d45\0\354\0\u1833"+
    "\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\73\0\354\0\u2257"+
    "\0\u2292\0\73\0\354\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\354\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\73\0\u2a68\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\2\1\30\1\31\1\32\1\33\1\6\1\12\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\2"+
    "\1\6\1\44\1\45\2\6\1\46\1\47\1\50\1\51"+
    "\2\52\1\53\1\54\1\55\1\56\1\2\1\57\1\2"+
    "\1\60\74\0\1\3\2\0\1\3\70\0\1\4\75\0"+
    "\1\6\1\61\1\0\1\61\1\0\1\6\1\0\7\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\65"+
    "\1\7\1\0\1\7\1\66\1\65\1\0\7\65\4\0"+
    "\1\67\4\0\5\65\1\0\5\65\1\0\1\65\1\0"+
    "\4\65\6\0\2\67\1\70\1\0\1\71\1\0\1\72"+
    "\5\0\1\65\1\73\1\0\1\73\1\66\1\65\1\0"+
    "\7\65\4\0\1\67\4\0\5\65\1\0\5\65\1\0"+
    "\1\65\1\0\4\65\6\0\2\67\1\70\1\0\1\71"+
    "\1\0\1\72\6\0\1\74\1\0\1\74\67\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\1\6\1\75"+
    "\5\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\15\0"+
    "\1\76\10\0\1\76\53\0\1\6\1\61\1\0\1\61"+
    "\1\0\1\6\1\0\1\6\1\77\5\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\7\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\3\6\1\100\3\6\11\0"+
    "\5\6\1\101\1\102\4\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\3\6\1\103"+
    "\3\6\11\0\5\6\1\104\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\7\0"+
    "\1\6\1\61\1\0\1\61\1\0\1\6\1\0\4\6"+
    "\1\105\2\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\4\6\6\0\1\62\1\0\1\63\1\0\1\64"+
    "\7\0\1\6\1\61\1\0\1\61\1\0\1\106\1\0"+
    "\7\6\11\0\2\6\1\106\2\6\1\0\5\6\1\0"+
    "\1\6\1\0\4\6\6\0\1\62\1\0\1\63\1\0"+
    "\1\64\7\0\1\6\1\61\1\0\1\61\1\0\1\6"+
    "\1\0\7\6\11\0\1\6\1\107\3\6\1\0\5\6"+
    "\1\0\1\6\1\0\1\6\1\110\2\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\7\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\3\6\1\17\3\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\25\0\1\111\1\112"+
    "\71\0\2\112\1\111\74\0\1\113\50\0\1\65\1\114"+
    "\1\0\1\114\1\0\1\65\1\0\7\65\1\0\1\76"+
    "\2\0\1\67\4\0\5\65\1\115\1\116\4\65\1\0"+
    "\1\65\1\0\4\65\6\0\2\67\1\70\1\0\1\71"+
    "\1\0\1\72\30\31\1\117\42\31\24\0\1\76\6\0"+
    "\1\120\44\0\1\6\1\61\1\0\1\61\1\0\1\121"+
    "\1\0\7\6\11\0\1\6\1\122\1\121\2\6\1\0"+
    "\5\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\7\0\1\6\1\61\1\0\1\61"+
    "\1\0\1\6\1\0\7\6\11\0\5\6\1\123\1\124"+
    "\4\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\7\0\1\6\1\61\1\0\1\61"+
    "\1\0\1\6\1\0\3\6\1\125\3\6\11\0\5\6"+
    "\1\126\1\127\4\6\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\17\0\1\130\22\0"+
    "\1\131\37\0\1\6\1\61\1\0\1\61\1\0\1\6"+
    "\1\0\1\6\1\132\5\6\11\0\4\6\1\133\1\0"+
    "\5\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\7\0\1\6\1\61\1\0\1\61"+
    "\1\0\1\6\1\0\1\134\6\6\11\0\5\6\1\0"+
    "\5\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\7\0\1\6\1\61\1\0\1\61"+
    "\1\0\1\6\1\0\3\6\1\135\3\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\7\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\1\136\3\6\1\137\2\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\3\6\1\140"+
    "\3\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\14\0"+
    "\1\141\23\0\1\141\41\0\1\6\1\61\1\0\1\61"+
    "\1\0\1\142\1\0\7\6\11\0\2\6\1\142\2\6"+
    "\1\0\5\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\7\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\1\143\6\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\26\0\1\76\72\0\1\76"+
    "\36\0\1\144\14\0\1\145\1\146\1\0\1\146\1\0"+
    "\1\145\1\0\7\145\4\0\1\67\4\0\5\145\1\115"+
    "\1\147\4\145\1\0\1\145\1\0\4\145\6\0\1\150"+
    "\1\67\1\151\1\0\1\152\1\0\1\72\5\0\1\65"+
    "\1\153\1\0\1\153\1\0\1\65\1\0\7\65\4\0"+
    "\1\67\4\0\5\65\1\115\1\116\4\65\1\0\1\65"+
    "\1\0\4\65\6\0\2\67\1\70\1\0\1\71\1\0"+
    "\1\72\67\0\1\54\1\0\1\54\72\0\1\54\1\0"+
    "\3\154\1\155\66\154\1\156\5\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\0\7\61\11\0\5\61\1\0\5\61"+
    "\1\0\1\61\1\0\4\61\22\0\2\145\1\0\1\145"+
    "\1\0\1\145\1\0\7\145\11\0\5\145\1\0\5\145"+
    "\1\0\1\145\1\0\4\145\6\0\1\62\1\0\1\63"+
    "\1\0\1\64\71\0\1\62\1\0\1\62\72\0\1\62"+
    "\6\0\1\65\4\0\1\65\1\0\7\65\11\0\5\65"+
    "\1\0\5\65\1\0\1\65\1\0\4\65\23\0\1\157"+
    "\1\0\1\157\1\0\1\160\65\0\1\65\1\114\1\0"+
    "\1\114\1\0\1\65\1\0\7\65\4\0\1\67\4\0"+
    "\5\65\1\0\5\65\1\0\1\65\1\0\4\65\6\0"+
    "\2\67\1\70\1\0\1\71\1\0\1\72\67\0\1\67"+
    "\1\0\1\67\72\0\1\67\1\0\72\72\1\67\6\0"+
    "\1\74\1\0\1\74\1\0\1\160\65\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\2\6\1\161\4\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\2\6\1\105"+
    "\4\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\7\0"+
    "\1\6\1\61\1\0\1\61\1\0\1\6\1\0\5\6"+
    "\1\105\1\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\4\6\6\0\1\62\1\0\1\63\1\0\1\64"+
    "\45\0\1\162\34\0\1\6\1\61\1\0\1\61\1\0"+
    "\1\6\1\0\7\6\11\0\5\6\1\0\1\6\1\163"+
    "\3\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\7\0\1\6\1\61\1\0\1\61"+
    "\1\0\1\6\1\0\7\6\11\0\3\6\1\164\1\6"+
    "\1\0\5\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\57\0\1\76\22\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\1\102\6\6"+
    "\11\0\5\6\1\0\3\6\1\165\1\166\1\0\1\6"+
    "\1\0\4\6\6\0\1\62\1\0\1\63\1\0\1\64"+
    "\7\0\1\6\1\61\1\0\1\61\1\0\1\6\1\0"+
    "\7\6\11\0\5\6\1\0\3\6\1\167\1\6\1\0"+
    "\1\6\1\0\4\6\6\0\1\62\1\0\1\63\1\0"+
    "\1\64\7\0\1\6\1\61\1\0\1\61\1\0\1\170"+
    "\1\0\7\6\11\0\2\6\1\170\2\6\1\0\5\6"+
    "\1\0\1\6\1\0\4\6\6\0\1\62\1\0\1\63"+
    "\1\0\1\64\26\0\1\52\46\0\27\113\1\171\1\172"+
    "\1\173\41\113\5\0\1\65\1\114\1\0\1\114\1\174"+
    "\1\65\1\0\7\65\4\0\1\67\4\0\5\65\1\0"+
    "\5\65\1\0\1\65\1\0\4\65\6\0\2\67\1\70"+
    "\1\0\1\71\1\0\1\72\16\0\1\175\61\0\1\65"+
    "\4\0\1\65\1\0\2\65\1\176\4\65\11\0\5\65"+
    "\1\0\5\65\1\0\1\65\1\0\4\65\15\0\2\120"+
    "\2\0\3\120\1\0\63\120\5\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\7\6\11\0\5\6\1\0"+
    "\2\6\1\177\2\6\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\7\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\5\6\1\167\1\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\23\0\1\200"+
    "\56\0\1\6\1\61\1\0\1\61\1\0\1\6\1\0"+
    "\5\6\1\201\1\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\4\6\6\0\1\62\1\0\1\63\1\0"+
    "\1\64\7\0\1\6\1\61\1\0\1\61\1\0\1\6"+
    "\1\0\4\6\1\202\2\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\4\6\6\0\1\62\1\0\1\63"+
    "\1\0\1\64\45\0\1\203\34\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\7\6\11\0\5\6\1\0"+
    "\1\6\1\167\3\6\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\23\0\1\204\21\0"+
    "\1\205\34\0\1\6\1\61\1\0\1\61\1\0\1\6"+
    "\1\0\5\6\1\206\1\6\11\0\5\6\1\0\1\6"+
    "\1\207\3\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\7\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\7\6\11\0\1\210\4\6"+
    "\1\0\5\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\7\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\5\6\1\211\1\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\7\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\7\6\11\0\5\6"+
    "\1\0\4\6\1\212\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\7\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\3\6\1\213\3\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\1\6\1\214"+
    "\5\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\23\0"+
    "\1\162\56\0\1\6\1\61\1\0\1\61\1\0\1\6"+
    "\1\0\5\6\1\163\1\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\4\6\6\0\1\62\1\0\1\63"+
    "\1\0\1\64\7\0\1\6\1\61\1\0\1\61\1\0"+
    "\1\6\1\0\4\6\1\215\2\6\11\0\5\6\1\0"+
    "\5\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\65\0\1\144\14\0\2\145\1\0"+
    "\1\145\1\0\1\145\1\0\7\145\11\0\5\145\1\0"+
    "\5\145\1\0\1\145\1\0\4\145\22\0\1\145\1\146"+
    "\1\0\1\146\1\174\1\145\1\0\7\145\4\0\1\67"+
    "\4\0\5\145\1\0\5\145\1\0\1\145\1\0\4\145"+
    "\6\0\2\67\1\70\1\0\1\71\1\0\1\72\5\0"+
    "\2\145\1\0\1\145\1\0\1\145\1\0\2\145\1\216"+
    "\4\145\11\0\5\145\1\0\5\145\1\0\1\145\1\0"+
    "\4\145\22\0\1\145\1\146\1\0\1\146\1\0\1\145"+
    "\1\0\7\145\4\0\1\67\4\0\5\145\1\0\5\145"+
    "\1\0\1\145\1\0\4\145\6\0\1\150\1\67\1\151"+
    "\1\0\1\152\1\0\1\72\67\0\1\150\1\0\1\150"+
    "\72\0\1\150\6\0\1\65\1\153\1\0\1\153\1\174"+
    "\1\65\1\0\7\65\4\0\1\67\4\0\5\65\1\0"+
    "\5\65\1\0\1\65\1\0\4\65\6\0\2\67\1\70"+
    "\1\0\1\71\1\0\1\72\72\217\1\220\2\217\1\154"+
    "\67\217\1\220\5\0\1\65\1\221\1\0\1\221\1\0"+
    "\1\222\1\0\7\65\4\0\1\67\4\0\5\65\1\0"+
    "\5\65\1\0\1\65\1\0\4\65\6\0\2\67\1\70"+
    "\1\0\1\71\1\0\1\72\1\0\1\223\4\0\1\224"+
    "\1\0\1\224\2\0\1\223\47\0\1\223\14\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\1\6\1\135"+
    "\5\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\7\0"+
    "\1\6\1\61\1\0\1\61\1\0\1\225\1\0\7\6"+
    "\11\0\2\6\1\225\2\6\1\0\5\6\1\0\1\6"+
    "\1\0\4\6\6\0\1\62\1\0\1\63\1\0\1\64"+
    "\7\0\1\6\1\61\1\0\1\61\1\0\1\6\1\0"+
    "\3\6\1\226\3\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\4\6\6\0\1\62\1\0\1\63\1\0"+
    "\1\64\7\0\1\6\1\61\1\0\1\61\1\0\1\163"+
    "\1\0\7\6\11\0\2\6\1\163\2\6\1\0\5\6"+
    "\1\0\1\6\1\0\4\6\6\0\1\62\1\0\1\63"+
    "\1\0\1\64\7\0\1\6\1\61\1\0\1\61\1\0"+
    "\1\6\1\0\1\6\1\227\5\6\11\0\5\6\1\0"+
    "\5\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\2\0\27\173\1\171\1\0\1\230"+
    "\41\173\27\172\1\0\1\172\1\0\41\172\27\173\1\171"+
    "\1\0\42\173\6\0\1\231\1\0\1\231\74\0\1\232"+
    "\23\0\1\232\41\0\1\65\4\0\1\233\1\0\7\65"+
    "\11\0\2\65\1\233\2\65\1\0\5\65\1\0\1\65"+
    "\1\0\4\65\22\0\1\6\1\61\1\0\1\61\1\0"+
    "\1\6\1\0\7\6\11\0\5\6\1\234\1\235\4\6"+
    "\1\0\1\6\1\0\4\6\6\0\1\62\1\0\1\63"+
    "\1\0\1\64\55\0\1\162\24\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\7\6\11\0\5\6\1\0"+
    "\5\6\1\0\1\6\1\0\1\6\1\163\2\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\7\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\7\6\11\0\3\6"+
    "\1\236\1\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\14\0\1\162"+
    "\23\0\1\162\75\0\2\237\35\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\6\1\0\7\6\11\0\5\6\1\237"+
    "\1\240\4\6\1\0\1\6\1\0\4\6\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\7\0\1\6\1\61\1\0"+
    "\1\61\1\0\1\102\1\0\7\6\11\0\2\6\1\102"+
    "\2\6\1\0\5\6\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\7\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\3\6\1\163\3\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\7\6\11\0"+
    "\5\6\1\0\5\6\1\241\1\242\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\7\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\7\6\11\0\5\6"+
    "\1\0\2\6\1\243\2\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\7\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\244\1\245\3\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\2\145"+
    "\1\0\1\145\1\0\1\246\1\0\7\145\11\0\2\145"+
    "\1\246\2\145\1\0\5\145\1\0\1\145\1\0\4\145"+
    "\15\0\72\217\1\156\5\0\1\65\1\221\1\0\1\221"+
    "\1\174\1\222\1\0\7\65\4\0\1\67\4\0\5\65"+
    "\1\0\5\65\1\0\1\65\1\0\4\65\6\0\2\67"+
    "\1\70\1\0\1\71\1\0\1\72\1\0\1\247\3\0"+
    "\1\65\1\250\1\0\1\250\1\0\1\65\1\247\7\65"+
    "\11\0\5\65\1\0\5\65\1\0\1\65\1\0\4\65"+
    "\5\0\1\247\15\0\1\224\1\0\1\224\67\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\1\142\6\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\4\6\1\251"+
    "\2\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\7\0"+
    "\1\65\1\252\1\0\1\252\1\0\1\253\1\0\7\65"+
    "\4\0\1\67\4\0\5\65\1\0\5\65\1\0\1\65"+
    "\1\0\4\65\6\0\2\67\1\70\1\0\1\71\1\0"+
    "\1\72\15\0\1\254\62\0\1\65\4\0\1\65\1\0"+
    "\1\65\1\255\5\65\11\0\5\65\1\0\5\65\1\0"+
    "\1\65\1\0\4\65\32\0\1\256\62\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\1\6\1\257\5\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\1\226\6\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\17\0\1\203"+
    "\62\0\1\6\1\61\1\0\1\61\1\0\1\6\1\0"+
    "\1\6\1\167\5\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\4\6\6\0\1\62\1\0\1\63\1\0"+
    "\1\64\14\0\1\260\23\0\1\260\41\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\251\1\0\7\6\11\0\2\6"+
    "\1\251\2\6\1\0\5\6\1\0\1\6\1\0\4\6"+
    "\6\0\1\62\1\0\1\63\1\0\1\64\7\0\1\6"+
    "\1\61\1\0\1\61\1\0\1\6\1\0\4\6\1\261"+
    "\2\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\4\6\6\0\1\62\1\0\1\63\1\0\1\64\23\0"+
    "\1\262\56\0\1\6\1\61\1\0\1\61\1\0\1\6"+
    "\1\0\5\6\1\263\1\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\4\6\6\0\1\62\1\0\1\63"+
    "\1\0\1\64\7\0\2\145\1\0\1\145\1\0\1\145"+
    "\1\0\1\145\1\264\5\145\11\0\5\145\1\0\5\145"+
    "\1\0\1\145\1\0\4\145\23\0\1\265\1\0\1\265"+
    "\67\0\1\65\1\266\1\0\1\266\1\267\1\270\1\0"+
    "\7\65\4\0\1\67\4\0\5\65\1\0\5\65\1\0"+
    "\1\65\1\0\4\65\6\0\2\67\1\70\1\0\1\71"+
    "\1\0\1\72\5\0\1\6\1\61\1\0\1\61\1\0"+
    "\1\6\1\0\2\6\1\163\4\6\11\0\5\6\1\0"+
    "\5\6\1\0\1\6\1\0\4\6\6\0\1\62\1\0"+
    "\1\63\1\0\1\64\7\0\1\65\1\252\1\0\1\252"+
    "\1\174\1\253\1\0\7\65\4\0\1\67\4\0\5\65"+
    "\1\0\5\65\1\0\1\65\1\0\4\65\6\0\2\67"+
    "\1\70\1\0\1\71\1\0\1\72\1\0\1\271\3\0"+
    "\1\65\1\272\1\0\1\272\1\0\1\65\1\271\7\65"+
    "\11\0\5\65\1\0\5\65\1\0\1\65\1\0\4\65"+
    "\5\0\1\271\47\0\1\273\37\0\1\65\4\0\1\65"+
    "\1\0\7\65\11\0\4\65\1\274\1\0\5\65\1\0"+
    "\1\65\1\0\4\65\33\0\1\162\61\0\1\6\1\61"+
    "\1\0\1\61\1\0\1\6\1\0\1\275\6\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\4\6\6\0"+
    "\1\62\1\0\1\63\1\0\1\64\7\0\2\145\1\0"+
    "\1\145\1\0\1\145\1\0\7\145\11\0\4\145\1\276"+
    "\1\0\5\145\1\0\1\145\1\0\4\145\22\0\1\65"+
    "\1\266\1\0\1\266\1\0\1\270\1\0\7\65\4\0"+
    "\1\67\4\0\5\65\1\0\5\65\1\0\1\65\1\0"+
    "\4\65\6\0\2\67\1\70\1\0\1\71\1\0\1\72"+
    "\5\0\1\65\1\266\1\0\1\266\1\174\1\270\1\0"+
    "\7\65\4\0\1\67\4\0\5\65\1\0\5\65\1\0"+
    "\1\65\1\0\4\65\6\0\2\67\1\70\1\0\1\71"+
    "\1\0\1\72\32\0\1\277\41\0\1\300\3\0\1\65"+
    "\1\301\1\0\1\301\1\0\1\65\1\300\7\65\11\0"+
    "\5\65\1\0\5\65\1\0\1\65\1\0\4\65\5\0"+
    "\1\300\15\0\1\272\1\0\1\272\67\0\1\65\1\302"+
    "\1\0\1\302\1\0\1\303\1\0\7\65\4\0\1\67"+
    "\4\0\5\65\1\0\5\65\1\0\1\65\1\0\4\65"+
    "\6\0\2\67\1\70\1\0\1\71\1\0\1\72\41\0"+
    "\2\304\35\0\1\65\4\0\1\65\1\0\7\65\11\0"+
    "\5\65\1\304\1\305\4\65\1\0\1\65\1\0\4\65"+
    "\22\0\1\6\1\61\1\0\1\61\1\0\1\6\1\0"+
    "\7\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\306\1\6\6\0\1\62\1\0\1\63\1\0"+
    "\1\64\7\0\2\145\1\0\1\145\1\0\1\145\1\0"+
    "\7\145\11\0\5\145\1\304\1\307\4\145\1\0\1\145"+
    "\1\0\4\145\33\0\1\310\62\0\1\311\1\0\1\311"+
    "\67\0\1\65\1\312\1\0\1\312\1\267\1\65\1\0"+
    "\7\65\4\0\1\67\4\0\5\65\1\0\5\65\1\0"+
    "\1\65\1\0\4\65\6\0\2\67\1\70\1\0\1\71"+
    "\1\0\1\72\5\0\1\65\1\302\1\0\1\302\1\174"+
    "\1\303\1\0\7\65\4\0\1\67\4\0\5\65\1\0"+
    "\5\65\1\0\1\65\1\0\4\65\6\0\2\67\1\70"+
    "\1\0\1\71\1\0\1\72\1\0\1\313\3\0\1\65"+
    "\1\67\1\0\1\67\1\0\1\65\1\313\7\65\11\0"+
    "\5\65\1\0\5\65\1\0\1\65\1\0\4\65\5\0"+
    "\1\313\30\0\1\314\56\0\1\65\4\0\1\65\1\0"+
    "\5\65\1\315\1\65\11\0\5\65\1\0\5\65\1\0"+
    "\1\65\1\0\4\65\22\0\2\145\1\0\1\145\1\0"+
    "\1\145\1\0\5\145\1\316\1\145\11\0\5\145\1\0"+
    "\5\145\1\0\1\145\1\0\4\145\56\0\2\317\35\0"+
    "\1\65\1\312\1\0\1\312\1\0\1\65\1\0\7\65"+
    "\4\0\1\67\4\0\5\65\1\0\5\65\1\0\1\65"+
    "\1\0\4\65\6\0\2\67\1\70\1\0\1\71\1\0"+
    "\1\72\5\0\1\65\1\312\1\0\1\312\1\174\1\65"+
    "\1\0\7\65\4\0\1\67\4\0\5\65\1\0\5\65"+
    "\1\0\1\65\1\0\4\65\6\0\2\67\1\70\1\0"+
    "\1\71\1\0\1\72\6\0\1\67\1\0\1\67\123\0"+
    "\2\320\35\0\1\65\4\0\1\65\1\0\7\65\11\0"+
    "\5\65\1\320\5\65\1\0\1\65\1\0\4\65\22\0"+
    "\2\145\1\0\1\145\1\0\1\145\1\0\7\145\11\0"+
    "\5\145\1\320\5\145\1\0\1\145\1\0\4\145\61\0"+
    "\1\321\66\0\1\322\73\0\2\323\42\0\1\324\23\0"+
    "\1\324\55\0\1\325\71\0\1\326\102\0\1\327\124\0"+
    "\1\330\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10915];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\17\1\1\11\3\1\1\11"+
    "\16\1\2\11\1\1\1\11\10\1\2\0\2\1\5\0"+
    "\2\1\1\11\2\1\1\0\2\1\1\0\5\1\1\11"+
    "\1\1\2\0\1\1\1\11\3\1\1\0\2\1\1\0"+
    "\2\1\1\11\7\1\1\0\7\1\2\0\5\1\1\0"+
    "\1\1\1\11\6\1\1\0\1\1\3\0\2\1\1\0"+
    "\2\1\1\0\1\11\1\0\15\1\1\0\5\1\2\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\4\1\1\0\1\1\3\0"+
    "\3\1\2\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\2\0\2\1\7\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* Cï¿½digo personalizado */
 
 // Se agregï¿½ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }

private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
}

private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
}

private Symbol symbol(String value, int type, int line) {
    return new Symbol(type, yyline, yycolumn, (Object)value);
}
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABC(java.io.Reader in) {
   /* Cï¿½digo que se ejecutarï¿½ en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* Cï¿½digo a ejecutar al finalizar el anï¿½lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Espacios y tabuladores
            }
          case 36: break;
          case 2: 
            { Symbol t = new Symbol(sym.ERROR_INVALID_CHARACTER, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ERROR_INVALID_CHARACTER, yyline);
    this._existenTokens = true;
    return t;
            }
          case 37: break;
          case 3: 
            { /*Token t = new Token("Enter", Types.IDENTIFIER);
 this._existenTokens = true;
 return t;*/
            }
          case 38: break;
          case 4: 
            { Symbol t = new Symbol(sym.IDENTIFIER, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.IDENTIFIER, yyline);
    if (yytext().length()>127){
        t = new Symbol(sym.ERROR_INVALID_LENGTH, yyline, yycolumn, (Object)yytext());
        //t.setType(Types.ERROR_INVALID_LENGTH);
    }
     this._existenTokens = true;
     return t;
            }
          case 39: break;
          case 5: 
            { Symbol t = new Symbol(sym.INTEGER_NUMERIC_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.INTEGER_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 40: break;
          case 6: 
            { Symbol t = new Symbol(sym.OPERATOR, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.OPERATOR, yyline);
    this._existenTokens = true;
    return t;
            }
          case 41: break;
          case 7: 
            { Symbol t = new Symbol(sym.MINUSOP, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ARITHMETICOP, yyline);
    this._existenTokens = true;
    return t;
            }
          case 42: break;
          case 8: 
            { Symbol t = new Symbol(sym.BOOLEAN_OPERATOR, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.BOOLEAN_OPERATOR, yyline);
    this._existenTokens = true;
    return t;
            }
          case 43: break;
          case 9: 
            { Symbol t = new Symbol(sym.EQUAL, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 44: break;
          case 10: 
            { Symbol t = new Symbol(sym.OPEN_PARENTHESIS, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.OPEN_PARENTHESIS, yyline);
    this._existenTokens = true;
    return t;
            }
          case 45: break;
          case 11: 
            { Symbol t = new Symbol(sym.ARITHMETICOP, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ARITHMETICOP, yyline);
    this._existenTokens = true;
    return t;
            }
          case 46: break;
          case 12: 
            { Symbol t = new Symbol(sym.CLOSE_PARENTHESIS, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.CLOSE_PARENTHESIS, yyline);
    this._existenTokens = true;
    return t;
            }
          case 47: break;
          case 13: 
            { Symbol t = new Symbol(sym.ERROR_COMMENT, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ERROR_COMMENT, yyline);
    this._existenTokens = true;
    return t;
    //return symbol(sym.ERROR_COMMENT);
            }
          case 48: break;
          case 14: 
            { Symbol t = new Symbol(sym.COMMA, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 49: break;
          case 15: 
            { Symbol t = new Symbol(sym.SEMI, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 50: break;
          case 16: 
            { Symbol t = new Symbol(sym.COLON, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 51: break;
          case 17: 
            { //Token t = new Token(yytext(), Types.ERROR_INVALID_CHARACTER, yyline);
    Symbol t = new Symbol(sym.ERROR_INVALID_CHARACTER, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    //return new Symbol(sym.ERROR_INVALID_CHARACTER);
    return t;
            }
          case 52: break;
          case 18: 
            { Symbol t = new Symbol(sym.ERROR_STRING, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ERROR_STRING, yyline);
    this._existenTokens = true;
    return t;
            }
          case 53: break;
          case 19: 
            { Symbol t = new Symbol(sym.ERROR_IDENTIFIER, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ERROR_IDENTIFIER, yyline);
    this._existenTokens = true;
    //return symbol(sym.ERROR_IDENTIFIER);
    return t;
            }
          case 54: break;
          case 20: 
            { Symbol t = new Symbol(sym.ERROR_FLOATING_POINT, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ERROR_FLOATING_POINT, yyline);
    this._existenTokens = true;
    return t;
            }
          case 55: break;
          case 21: 
            { // Comentario de bloque 1
            }
          case 56: break;
          case 22: 
            { Symbol t = new Symbol(sym.RESERVED, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.RESERVED, yyline);
    this._existenTokens = true;
    return t;
            }
          case 57: break;
          case 23: 
            { Symbol t = new Symbol(sym.IF, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 58: break;
          case 24: 
            { Symbol t = new Symbol(sym.NUMERIC_CHAR_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.NUMERIC_CHAR_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 59: break;
          case 25: 
            { Symbol t = new Symbol(sym.STRING_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.STRING_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 60: break;
          case 26: 
            { Symbol t = new Symbol(sym.IDENTIFIER, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.FLOATING_POINT_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 61: break;
          case 27: 
            { Symbol t = new Symbol(sym.END, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 62: break;
          case 28: 
            { Symbol t = new Symbol(sym.INT, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 63: break;
          case 29: 
            { Symbol t = new Symbol(sym.VAR, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 64: break;
          case 30: 
            { Symbol t = new Symbol(sym.CHAR_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.CHAR_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 65: break;
          case 31: 
            { Symbol t = new Symbol(sym.THEN, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 66: break;
          case 32: 
            { Symbol t = new Symbol(sym.SCIENTIFIC_NOTATION_NUMERIC_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.SCIENTIFIC_NOTATION_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 67: break;
          case 33: 
            { Symbol t = new Symbol(sym.BEGIN, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 68: break;
          case 34: 
            { Symbol t = new Symbol(sym.CONST, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 69: break;
          case 35: 
            { Symbol t = new Symbol(sym.PROGRAM, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

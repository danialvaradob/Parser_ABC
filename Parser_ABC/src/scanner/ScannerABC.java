package scanner;

/* The following code was generated by JFlex 1.6.1 */

/* Secciï¿½n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/SegundoSemestre2018/Compiladores e Interpretes/Proyectos/Proyecto2/Parser_ABC/Parser_ABC/src/ScannerABC.flex</tt>
 */
public class ScannerABC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\4\1\2\1\7\1\7\1\3\22\0\1\1\1\63"+
    "\1\71\1\64\1\63\1\63\1\63\1\0\1\27\1\32\1\30\1\55"+
    "\1\54\1\13\1\11\1\34\1\10\1\6\10\6\1\62\1\54\1\60"+
    "\1\57\1\56\1\0\1\63\1\14\1\36\1\42\1\16\1\12\1\47"+
    "\1\40\1\45\1\24\1\5\1\53\1\41\1\26\1\15\1\17\1\51"+
    "\1\5\1\20\1\44\1\21\1\50\1\25\1\46\1\22\1\35\1\5"+
    "\1\54\1\0\1\61\1\63\1\5\1\0\1\14\1\36\1\42\1\16"+
    "\1\37\1\47\1\40\1\45\1\24\1\5\1\53\1\41\1\26\1\15"+
    "\1\17\1\51\1\5\1\20\1\44\1\21\1\50\1\25\1\46\1\22"+
    "\1\35\1\5\1\33\1\4\1\31\7\0\1\7\33\0\1\70\30\0"+
    "\1\66\4\0\1\66\2\0\1\65\1\67\36\0\1\65\1\67\114\0"+
    "\2\23\115\0\1\43\u1ea8\0\1\7\1\7\u0100\0\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\7\7\4\1\2\3\4\3\7\1\10\1\7"+
    "\4\4\1\2\5\4\5\7\4\2\1\11\1\4\1\2"+
    "\2\0\1\12\1\13\4\0\1\13\5\4\1\0\1\4"+
    "\1\14\1\0\1\4\1\15\1\14\5\4\3\14\1\4"+
    "\2\0\1\12\1\10\2\16\7\4\3\0\4\4\1\0"+
    "\4\4\1\0\5\4\1\7\4\2\2\0\1\17\2\11"+
    "\1\20\1\21\2\0\3\4\1\15\4\4\1\0\1\4"+
    "\2\0\1\12\2\10\1\0\1\10\1\0\3\10\6\4"+
    "\2\0\2\4\2\0\1\4\1\14\4\4\1\2\1\11"+
    "\1\22\1\21\1\12\1\0\1\21\3\4\1\0\1\4"+
    "\2\0\1\12\2\0\1\10\1\12\1\0\1\16\4\0"+
    "\1\10\1\0\2\4\2\0\4\4\1\0\3\4\1\2"+
    "\1\0\1\23\1\0\1\12\1\0\1\12\1\16\1\10"+
    "\1\0\1\16\1\10\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\1\2\2\23\1\0\1\12\3\0\1\12"+
    "\2\10\1\0\3\10\1\0\3\4\1\2\2\0\1\23"+
    "\1\0\1\12\1\0\1\12\2\10\1\0\1\12\1\10"+
    "\1\4\1\2\1\0\2\23\2\0\1\12\2\10\2\0"+
    "\1\10\1\2\2\0\1\10\1\0\1\12\2\10\3\0"+
    "\2\10\2\0\2\10\1\0\1\12\1\10\1\0\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\256\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\72\0\u0828\0\u0862"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\350\0\350\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\72\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\72\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u0b8e\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\72"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u0b8e\0\u2392\0\u23cc"+
    "\0\u2406\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562"+
    "\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u1e22"+
    "\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8"+
    "\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98"+
    "\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68"+
    "\0\u2ca2\0\u264a\0\u2cdc\0\u2d16\0\u27a6\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4"+
    "\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74"+
    "\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\72"+
    "\0\u3e14\0\u3e4e\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\2\1\31\1\32\1\33\1\6\1\34\1\12"+
    "\1\35\1\36\1\37\1\40\1\41\1\6\1\42\1\43"+
    "\1\44\1\45\1\2\1\6\1\46\1\47\1\50\1\46"+
    "\1\51\1\46\1\52\1\53\1\54\1\55\1\2\1\56"+
    "\1\2\1\57\73\0\1\3\2\0\1\3\67\0\1\4"+
    "\74\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\7\6\1\0\3\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\64\1\7\1\0\1\7\1\65\1\64\1\0\7\64"+
    "\1\0\3\64\2\66\1\0\1\66\2\0\6\64\1\0"+
    "\6\64\1\0\1\64\7\0\2\66\1\67\1\0\1\70"+
    "\1\0\1\71\5\0\1\64\1\10\1\0\1\10\1\65"+
    "\1\64\1\0\7\64\1\0\3\64\2\66\1\0\1\66"+
    "\2\0\6\64\1\0\6\64\1\0\1\64\7\0\2\66"+
    "\1\67\1\0\1\70\1\0\1\71\6\0\1\72\1\0"+
    "\1\72\66\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\1\6\1\73\5\6\1\0\3\6\6\0\4\6"+
    "\1\74\1\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\15\0\1\46\43\0\1\46"+
    "\17\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\6\1\75\2\6\1\76\2\6\1\0\3\6\6\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\3\6\1\77\3\6\1\100\1\101"+
    "\2\6\6\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\7\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\3\6\1\102\3\6"+
    "\1\103\1\104\2\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\4\6"+
    "\1\105\2\6\1\0\3\6\6\0\6\6\1\0\3\6"+
    "\1\106\2\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\107\1\0\7\6\1\0\3\6\6\0\2\6\1\107"+
    "\3\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\3\6\1\106\1\110\2\6\1\0"+
    "\3\6\6\0\1\111\5\6\1\0\1\6\1\112\4\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\3\6\1\113\3\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\17\0\1\114\31\0\1\115\27\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\1\6\1\116\5\6"+
    "\1\0\3\6\6\0\6\6\1\0\3\6\1\106\2\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\117\6\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\3\6\1\75\3\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\64\1\120\1\0\1\120\1\0\1\64"+
    "\1\0\7\64\1\121\1\122\2\64\1\66\1\123\1\0"+
    "\1\66\2\0\6\64\1\0\6\64\1\0\1\64\7\0"+
    "\2\66\1\67\1\0\1\70\1\0\1\71\5\0\1\64"+
    "\1\120\1\0\1\120\1\0\1\64\1\0\7\64\1\121"+
    "\1\122\2\64\2\66\1\0\1\66\2\0\6\64\1\0"+
    "\6\64\1\0\1\64\3\0\1\46\3\0\2\66\1\67"+
    "\1\0\1\70\1\0\1\71\5\0\1\64\1\120\1\0"+
    "\1\120\1\0\1\64\1\0\7\64\1\121\1\122\2\64"+
    "\2\66\1\0\1\66\2\0\6\64\1\0\6\64\1\0"+
    "\1\64\7\0\2\66\1\67\1\0\1\70\1\0\1\71"+
    "\31\32\1\124\40\32\34\0\1\125\22\0\1\46\17\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\126\1\0\3\6"+
    "\1\127\3\6\1\0\3\6\6\0\1\130\1\6\1\126"+
    "\3\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\3\6\1\131\3\6\1\0\3\6"+
    "\6\0\6\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\1\132\2\6\1\133\3\6"+
    "\1\0\3\6\6\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\1\74\2\6"+
    "\1\134\3\6\1\0\3\6\6\0\6\6\1\0\1\6"+
    "\1\25\4\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\14\0\1\135\6\0\1\136\15\0\1\135"+
    "\5\0\1\137\31\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\140\1\0\5\6\1\141\1\6\1\0\3\6\6\0"+
    "\2\6\1\140\3\6\1\0\1\6\1\142\4\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\4\6"+
    "\1\143\2\6\1\144\1\145\2\6\6\0\6\6\1\0"+
    "\1\6\1\146\4\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\1\147\2\6\1\150\3\6\1\151"+
    "\1\152\2\6\6\0\6\6\1\0\4\6\1\153\1\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\6\1\154\5\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\1\155\3\6\1\156\2\6\1\0\3\6\6\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\57\0\1\157\1\0\1\46\70\0"+
    "\1\52\1\46\70\0\2\46\1\52\70\0\1\46\17\0"+
    "\1\160\1\161\1\0\1\161\1\0\1\160\1\0\7\160"+
    "\1\121\1\162\2\160\2\66\1\0\1\66\2\0\6\160"+
    "\1\0\6\160\1\0\1\160\7\0\1\163\1\66\1\164"+
    "\1\0\1\165\1\0\1\71\5\0\1\64\1\166\1\0"+
    "\1\166\1\0\1\64\1\0\7\64\1\121\1\122\2\64"+
    "\2\66\1\0\1\66\2\0\6\64\1\0\6\64\1\0"+
    "\1\64\7\0\2\66\1\67\1\0\1\70\1\0\1\71"+
    "\66\0\1\53\1\0\1\53\71\0\1\53\1\0\3\167"+
    "\1\170\65\167\1\171\5\0\2\60\1\0\1\60\1\0"+
    "\1\60\1\0\7\60\1\0\3\60\6\0\6\60\1\0"+
    "\6\60\1\0\1\60\23\0\2\160\1\0\1\160\1\0"+
    "\1\160\1\0\7\160\1\0\3\160\6\0\6\160\1\0"+
    "\6\160\1\0\1\160\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\70\0\1\61\1\0\1\61\71\0\1\61\6\0"+
    "\1\64\4\0\1\64\1\0\7\64\1\0\3\64\6\0"+
    "\6\64\1\0\6\64\1\0\1\64\24\0\1\172\1\0"+
    "\1\172\1\0\1\173\64\0\1\64\1\120\1\0\1\120"+
    "\1\0\1\64\1\0\7\64\1\0\3\64\2\66\1\0"+
    "\1\66\2\0\6\64\1\0\6\64\1\0\1\64\7\0"+
    "\2\66\1\67\1\0\1\70\1\0\1\71\66\0\1\66"+
    "\1\0\1\66\71\0\1\66\1\0\71\71\1\66\6\0"+
    "\1\72\1\0\1\72\1\0\1\173\64\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\2\6\1\106\4\6"+
    "\1\0\3\6\6\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\7\6\1\0"+
    "\3\6\6\0\6\6\1\174\1\175\5\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\2\6\1\105"+
    "\4\6\1\0\3\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\4\6"+
    "\1\176\2\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\5\6\1\105\1\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\43\0\1\115\35\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\6\0\4\6"+
    "\1\106\1\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\7\6\1\0\3\6\6\0"+
    "\6\6\1\0\2\6\1\177\3\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\27\0\1\200\51\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\7\6"+
    "\1\0\1\6\1\105\1\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\201\6\6\1\0\3\6\6\0\5\6\1\202\1\0"+
    "\5\6\1\203\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\6\1\0\7\6\1\0\3\6\6\0\6\6\1\0"+
    "\4\6\1\175\1\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\6\0\6\6"+
    "\1\0\5\6\1\175\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\204\1\0\7\6\1\0\3\6\6\0\2\6"+
    "\1\204\3\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\4\6\1\105\2\6\1\0"+
    "\3\6\6\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\23\0\1\115\17\0"+
    "\1\205\35\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\5\6\1\106\1\6\1\0\3\6\6\0\4\6"+
    "\1\206\1\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\4\6\1\106\2\6\1\0"+
    "\3\6\6\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\7\0\1\64\1\120"+
    "\1\0\1\120\1\207\1\64\1\0\7\64\1\0\3\64"+
    "\2\66\1\0\1\66\2\0\6\64\1\0\6\64\1\0"+
    "\1\64\7\0\2\66\1\67\1\0\1\70\1\0\1\71"+
    "\16\0\1\210\60\0\1\64\4\0\1\64\1\0\2\64"+
    "\1\211\4\64\1\0\3\64\6\0\6\64\1\0\6\64"+
    "\1\0\1\64\16\0\6\212\1\213\1\212\1\213\16\212"+
    "\1\123\1\214\1\215\1\216\30\212\2\123\1\217\1\212"+
    "\1\220\1\212\1\221\2\125\2\0\3\125\1\0\62\125"+
    "\5\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\7\6\1\0\3\6\6\0\3\6\1\222\2\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\3\6\1\223\3\6\1\0\3\6\6\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\6\1\0\5\6\1\175\1\6\1\0\3\6\6\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\5\6\1\224\1\6\1\0\3\6"+
    "\6\0\6\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\7\6\1\0\3\6\6\0"+
    "\1\6\1\225\4\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\7\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\1\6\1\226\5\6"+
    "\1\0\3\6\6\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\1\6\1\227"+
    "\5\6\1\0\3\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\23\0"+
    "\1\115\70\0\1\230\70\0\1\231\57\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\5\6\1\106\1\6"+
    "\1\0\3\6\6\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\4\6\1\232"+
    "\2\6\1\0\3\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\3\6"+
    "\1\233\3\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\7\6\1\234\1\130\2\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\23\0\1\235\55\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\6\1\0\5\6\1\236\1\6\1\0\3\6\6\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\7\6\1\151\1\152\2\6\6\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\6\0\4\6"+
    "\1\74\1\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\4\6\1\237\2\6\1\0"+
    "\3\6\6\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\43\0\1\174\35\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\7\6"+
    "\1\0\3\6\6\0\4\6\1\175\1\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\6\1\240\5\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\5\6\1\241\1\6\1\0\3\6\6\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\6\1\0\7\6\1\0\3\6\6\0\5\6\1\242"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\6\1\0\3\6\1\243\3\6\1\0\3\6\6\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\57\0\1\157\21\0\2\160\1\0"+
    "\1\160\1\0\1\160\1\0\7\160\1\0\3\160\6\0"+
    "\6\160\1\0\6\160\1\0\1\160\23\0\1\160\1\161"+
    "\1\0\1\161\1\207\1\160\1\0\7\160\1\0\3\160"+
    "\2\66\1\0\1\66\2\0\6\160\1\0\6\160\1\0"+
    "\1\160\7\0\2\66\1\67\1\0\1\70\1\0\1\71"+
    "\5\0\2\160\1\0\1\160\1\0\1\160\1\0\2\160"+
    "\1\244\4\160\1\0\3\160\6\0\6\160\1\0\6\160"+
    "\1\0\1\160\23\0\1\160\1\161\1\0\1\161\1\0"+
    "\1\160\1\0\7\160\1\0\3\160\2\66\1\0\1\66"+
    "\2\0\6\160\1\0\6\160\1\0\1\160\7\0\1\163"+
    "\1\66\1\164\1\0\1\165\1\0\1\71\66\0\1\163"+
    "\1\0\1\163\71\0\1\163\6\0\1\64\1\166\1\0"+
    "\1\166\1\207\1\64\1\0\7\64\1\0\3\64\2\66"+
    "\1\0\1\66\2\0\6\64\1\0\6\64\1\0\1\64"+
    "\7\0\2\66\1\67\1\0\1\70\1\0\1\71\71\245"+
    "\1\246\2\245\1\167\66\245\1\246\5\0\1\64\1\247"+
    "\1\0\1\247\1\0\1\250\1\0\7\64\1\0\3\64"+
    "\2\66\1\0\1\66\2\0\6\64\1\0\6\64\1\0"+
    "\1\64\7\0\2\66\1\67\1\0\1\70\1\0\1\71"+
    "\1\0\1\251\4\0\1\252\1\0\1\252\2\0\1\251"+
    "\41\0\1\251\26\0\1\115\24\0\1\115\37\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\106\1\0\7\6\1\0"+
    "\3\6\6\0\2\6\1\106\3\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\1\253"+
    "\6\6\1\0\3\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\1\6"+
    "\1\131\5\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\2\6\1\106\4\6\1\0\3\6\6\0\4\6\1\106"+
    "\1\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\3\6\1\254\3\6\1\0\3\6"+
    "\6\0\6\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\255\1\0\7\6\1\0\3\6\6\0"+
    "\2\6\1\255\3\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\7\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\1\6\1\106\5\6"+
    "\1\0\3\6\6\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\25\0\2\256"+
    "\52\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\7\6\1\256\1\257\2\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\10\0\1\260\1\0\1\260\73\0\1\261\24\0\1\261"+
    "\37\0\1\64\4\0\1\262\1\0\7\64\1\0\3\64"+
    "\6\0\2\64\1\262\3\64\1\0\6\64\1\0\1\64"+
    "\16\0\30\212\1\263\1\215\1\264\45\212\1\213\1\212"+
    "\1\213\1\265\15\212\1\123\1\214\1\215\1\216\30\212"+
    "\2\123\1\217\1\212\1\220\1\212\1\221\5\264\1\266"+
    "\1\267\1\264\1\267\1\264\1\266\1\264\7\266\1\264"+
    "\3\266\1\216\1\214\1\0\1\270\2\264\6\266\1\264"+
    "\6\266\1\264\1\266\7\264\2\216\1\271\1\264\1\272"+
    "\1\264\1\273\30\215\1\0\1\215\1\0\37\215\5\264"+
    "\1\266\1\267\1\264\1\267\1\264\1\266\1\264\7\266"+
    "\1\264\3\266\1\216\1\214\1\0\1\216\2\264\6\266"+
    "\1\264\6\266\1\264\1\266\7\264\2\216\1\271\1\264"+
    "\1\272\1\264\1\273\30\212\1\263\1\215\1\264\33\212"+
    "\1\123\1\212\1\123\31\212\1\263\1\215\1\264\35\212"+
    "\1\123\1\212\30\221\1\274\1\275\1\273\36\221\1\123"+
    "\5\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\7\6\1\276\1\204\2\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\7\6\1\0\3\6\6\0\4\6\1\277\1\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\3\6\1\106\3\6\1\0\3\6\6\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\101\1\0\7\6\1\0\3\6\6\0\2\6\1\101"+
    "\3\6\1\0\6\6\1\0\1\6\7\0\1\61\1\0"+
    "\1\62\1\0\1\63\7\0\1\6\1\60\1\0\1\60"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\6\0\3\6"+
    "\1\300\2\6\1\0\6\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\7\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\7\6\1\0\3\6\6\0"+
    "\6\6\1\135\1\140\5\6\1\0\1\6\7\0\1\61"+
    "\1\0\1\62\1\0\1\63\25\0\2\301\65\0\1\302"+
    "\56\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\7\6\1\301\1\303\2\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\4\6\1\304\2\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\23\0\1\174\115\0\1\115\31\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\7\6\1\0\3\6"+
    "\6\0\6\6\1\0\1\6\1\106\4\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\7\6\1\0"+
    "\3\6\6\0\6\6\1\0\2\6\1\305\3\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\7\6"+
    "\1\0\3\6\6\0\5\6\1\306\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\7\6"+
    "\1\100\1\101\2\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\7\6"+
    "\1\0\3\6\6\0\6\6\1\0\6\6\1\307\1\310"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\7\6\1\0"+
    "\3\6\6\0\3\6\1\311\1\6\1\312\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\2\160\1\0\1\160\1\0\1\313\1\0\7\160"+
    "\1\0\3\160\6\0\2\160\1\313\3\160\1\0\6\160"+
    "\1\0\1\160\16\0\71\245\1\171\5\0\1\64\1\247"+
    "\1\0\1\247\1\207\1\250\1\0\7\64\1\0\3\64"+
    "\2\66\1\0\1\66\2\0\6\64\1\0\6\64\1\0"+
    "\1\64\7\0\2\66\1\67\1\0\1\70\1\0\1\71"+
    "\1\0\1\314\3\0\1\64\1\315\1\0\1\315\1\0"+
    "\1\64\1\314\7\64\1\0\3\64\6\0\6\64\1\0"+
    "\6\64\1\0\1\64\1\0\1\314\22\0\1\252\1\0"+
    "\1\252\66\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\7\6\1\0\3\6\6\0\1\106\5\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\4\6\1\73\2\6\1\0\3\6\6\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\6\1\0\1\140\6\6\1\0\3\6\6\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\17\0\1\174\61\0\1\6\1\60\1\0"+
    "\1\60\1\0\1\6\1\0\1\6\1\175\5\6\1\0"+
    "\3\6\6\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\61\1\0\1\62\1\0\1\63\7\0\1\64\1\316"+
    "\1\0\1\316\1\0\1\317\1\0\7\64\1\0\3\64"+
    "\2\66\1\0\1\66\2\0\6\64\1\0\6\64\1\0"+
    "\1\64\7\0\2\66\1\67\1\0\1\70\1\0\1\71"+
    "\15\0\1\320\61\0\1\64\4\0\1\64\1\0\1\64"+
    "\1\321\5\64\1\0\3\64\6\0\6\64\1\0\6\64"+
    "\1\0\1\64\16\0\30\264\1\263\1\0\1\322\67\264"+
    "\1\263\1\0\40\264\6\212\1\323\1\212\1\323\17\212"+
    "\1\263\1\215\1\264\37\212\5\264\1\266\4\264\1\266"+
    "\1\264\7\266\1\264\3\266\1\264\1\263\1\0\3\264"+
    "\6\266\1\264\6\266\1\264\1\266\23\264\1\266\1\267"+
    "\1\264\1\267\1\324\1\266\1\264\7\266\1\264\3\266"+
    "\1\216\1\214\1\0\1\216\2\264\6\266\1\264\6\266"+
    "\1\264\1\266\7\264\2\216\1\271\1\264\1\272\1\264"+
    "\1\273\30\264\1\263\1\0\34\264\1\216\1\264\1\216"+
    "\31\264\1\263\1\0\36\264\1\216\1\264\30\273\1\274"+
    "\1\71\37\273\1\216\30\273\1\274\1\71\1\325\36\273"+
    "\1\216\30\275\1\71\1\275\1\71\36\275\1\326\15\0"+
    "\1\115\61\0\1\6\1\60\1\0\1\60\1\0\1\327"+
    "\1\0\7\6\1\0\3\6\6\0\2\6\1\327\3\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\1\6\1\60\1\0\1\60\1\0"+
    "\1\6\1\0\7\6\1\330\1\331\2\6\6\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\17\0\1\332\75\0\1\333\55\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\1\6\1\334"+
    "\5\6\1\0\3\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\5\6"+
    "\1\300\1\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\254\6\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\5\6\1\335\1\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\14\0\1\336\24\0\1\336\37\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\73\1\0\7\6\1\0\3\6"+
    "\6\0\2\6\1\73\3\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\4\6\1\337"+
    "\2\6\1\0\3\6\6\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\61\1\0\1\62\1\0\1\63\7\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\340\1\0\7\6"+
    "\1\0\3\6\6\0\2\6\1\340\3\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\2\160\1\0\1\160\1\0\1\160\1\0\1\160"+
    "\1\341\5\160\1\0\3\160\6\0\6\160\1\0\6\160"+
    "\1\0\1\160\24\0\1\342\1\0\1\342\66\0\1\64"+
    "\1\343\1\0\1\343\1\344\1\345\1\0\7\64\1\0"+
    "\3\64\2\66\1\0\1\66\2\0\6\64\1\0\6\64"+
    "\1\0\1\64\7\0\2\66\1\67\1\0\1\70\1\0"+
    "\1\71\5\0\1\64\1\316\1\0\1\316\1\207\1\317"+
    "\1\0\7\64\1\0\3\64\2\66\1\0\1\66\2\0"+
    "\6\64\1\0\6\64\1\0\1\64\7\0\2\66\1\67"+
    "\1\0\1\70\1\0\1\71\1\0\1\346\3\0\1\64"+
    "\1\347\1\0\1\347\1\0\1\64\1\346\7\64\1\0"+
    "\3\64\6\0\6\64\1\0\6\64\1\0\1\64\1\0"+
    "\1\346\63\0\1\350\27\0\1\64\4\0\1\64\1\0"+
    "\7\64\1\0\3\64\6\0\6\64\1\0\3\64\1\351"+
    "\2\64\1\0\1\64\16\0\6\212\1\352\1\212\1\352"+
    "\1\212\1\353\14\212\1\123\1\214\1\215\1\216\30\212"+
    "\2\123\1\217\1\212\1\220\1\212\1\221\6\264\1\354"+
    "\1\264\1\354\17\264\1\263\1\0\40\264\6\215\1\355"+
    "\1\215\1\355\16\215\1\326\1\66\1\215\1\66\30\215"+
    "\2\326\1\356\1\215\1\357\1\215\1\275\5\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\1\204\6\6"+
    "\1\0\3\6\6\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\17\0\1\135"+
    "\61\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\6\1\140\5\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\42\0\1\115\54\0\2\330\52\0\1\6\1\60"+
    "\1\0\1\60\1\0\1\6\1\0\7\6\1\0\3\6"+
    "\6\0\3\6\1\106\2\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\7\0\1\6"+
    "\1\60\1\0\1\60\1\0\1\6\1\0\7\6\1\360"+
    "\1\361\2\6\6\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\61\1\0\1\62\1\0\1\63\20\0\1\115"+
    "\60\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\1\362\6\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\2\6\1\363\4\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\2\160\1\0\1\160\1\0\1\160\1\0"+
    "\7\160\1\0\3\160\6\0\6\160\1\0\3\160\1\364"+
    "\2\160\1\0\1\160\23\0\1\64\1\343\1\0\1\343"+
    "\1\0\1\345\1\0\7\64\1\0\3\64\2\66\1\0"+
    "\1\66\2\0\6\64\1\0\6\64\1\0\1\64\7\0"+
    "\2\66\1\67\1\0\1\70\1\0\1\71\5\0\1\64"+
    "\1\343\1\0\1\343\1\207\1\345\1\0\7\64\1\0"+
    "\3\64\2\66\1\0\1\66\2\0\6\64\1\0\6\64"+
    "\1\0\1\64\7\0\2\66\1\67\1\0\1\70\1\0"+
    "\1\71\33\0\1\365\37\0\1\366\3\0\1\64\1\367"+
    "\1\0\1\367\1\0\1\64\1\366\7\64\1\0\3\64"+
    "\6\0\6\64\1\0\6\64\1\0\1\64\1\0\1\366"+
    "\22\0\1\347\1\0\1\347\66\0\1\64\1\370\1\0"+
    "\1\370\1\0\1\371\1\0\7\64\1\0\3\64\2\66"+
    "\1\0\1\66\2\0\6\64\1\0\6\64\1\0\1\64"+
    "\7\0\2\66\1\67\1\0\1\70\1\0\1\71\23\0"+
    "\2\372\52\0\1\64\4\0\1\64\1\0\7\64\1\372"+
    "\1\373\2\64\6\0\6\64\1\0\6\64\1\0\1\64"+
    "\16\0\6\212\1\352\1\212\1\352\1\265\1\353\14\212"+
    "\1\123\1\214\1\215\1\216\30\212\2\123\1\217\1\212"+
    "\1\220\1\212\1\221\1\212\1\374\4\212\1\375\1\212"+
    "\1\375\2\212\1\374\14\212\1\263\1\215\1\264\22\212"+
    "\1\374\14\212\5\264\1\266\1\376\1\264\1\376\1\264"+
    "\1\377\1\264\7\266\1\264\3\266\1\216\1\214\1\0"+
    "\1\216\2\264\6\266\1\264\6\266\1\264\1\266\7\264"+
    "\2\216\1\271\1\264\1\272\1\264\1\273\6\215\1\355"+
    "\1\215\1\355\1\u0100\15\215\1\326\1\66\1\215\1\66"+
    "\30\215\2\326\1\356\1\215\1\357\1\215\1\275\30\215"+
    "\1\0\1\215\1\0\33\215\1\326\1\215\1\326\31\215"+
    "\1\0\1\215\1\0\35\215\1\326\1\215\17\0\1\276"+
    "\57\0\1\6\1\60\1\0\1\60\1\0\1\6\1\0"+
    "\3\6\1\204\3\6\1\0\3\6\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\7\6\1\0\2\6\1\106\6\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\61\1\0\1\62\1\0"+
    "\1\63\7\0\1\6\1\60\1\0\1\60\1\0\1\6"+
    "\1\0\7\6\1\0\3\6\6\0\6\6\1\0\4\6"+
    "\1\u0101\1\6\1\0\1\6\7\0\1\61\1\0\1\62"+
    "\1\0\1\63\7\0\2\160\1\0\1\160\1\0\1\160"+
    "\1\0\7\160\1\372\1\u0102\2\160\6\0\6\160\1\0"+
    "\6\160\1\0\1\160\34\0\1\u0103\61\0\1\u0104\1\0"+
    "\1\u0104\66\0\1\64\1\u0105\1\0\1\u0105\1\344\1\64"+
    "\1\0\7\64\1\0\3\64\2\66\1\0\1\66\2\0"+
    "\6\64\1\0\6\64\1\0\1\64\7\0\2\66\1\67"+
    "\1\0\1\70\1\0\1\71\5\0\1\64\1\370\1\0"+
    "\1\370\1\207\1\371\1\0\7\64\1\0\3\64\2\66"+
    "\1\0\1\66\2\0\6\64\1\0\6\64\1\0\1\64"+
    "\7\0\2\66\1\67\1\0\1\70\1\0\1\71\1\0"+
    "\1\u0106\3\0\1\64\1\66\1\0\1\66\1\0\1\64"+
    "\1\u0106\7\64\1\0\3\64\6\0\6\64\1\0\6\64"+
    "\1\0\1\64\1\0\1\u0106\35\0\1\u0107\55\0\1\64"+
    "\4\0\1\64\1\0\5\64\1\u0108\1\64\1\0\3\64"+
    "\6\0\6\64\1\0\6\64\1\0\1\64\16\0\6\212"+
    "\1\375\1\212\1\375\17\212\1\263\1\215\1\264\45\212"+
    "\1\u0109\1\212\1\u0109\1\212\1\u010a\14\212\1\123\1\214"+
    "\1\215\1\216\30\212\2\123\1\217\1\212\1\220\1\212"+
    "\1\221\5\264\1\266\1\376\1\264\1\376\1\324\1\377"+
    "\1\264\7\266\1\264\3\266\1\216\1\214\1\0\1\216"+
    "\2\264\6\266\1\264\6\266\1\264\1\266\7\264\2\216"+
    "\1\271\1\264\1\272\1\264\1\273\1\264\1\u010b\3\264"+
    "\1\266\1\u010c\1\264\1\u010c\1\264\1\266\1\u010b\7\266"+
    "\1\264\3\266\1\264\1\263\1\0\3\264\6\266\1\264"+
    "\6\266\1\264\1\266\1\264\1\u010b\14\264\6\215\1\u010d"+
    "\1\215\1\u010d\17\215\1\0\1\215\1\0\37\215\5\0"+
    "\1\6\1\60\1\0\1\60\1\0\1\6\1\0\4\6"+
    "\1\175\2\6\1\0\3\6\6\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\61\1\0\1\62\1\0\1\63"+
    "\7\0\2\160\1\0\1\160\1\0\1\160\1\0\5\160"+
    "\1\u010e\1\160\1\0\3\160\6\0\6\160\1\0\6\160"+
    "\1\0\1\160\41\0\2\u010f\52\0\1\64\1\u0105\1\0"+
    "\1\u0105\1\0\1\64\1\0\7\64\1\0\3\64\2\66"+
    "\1\0\1\66\2\0\6\64\1\0\6\64\1\0\1\64"+
    "\7\0\2\66\1\67\1\0\1\70\1\0\1\71\5\0"+
    "\1\64\1\u0105\1\0\1\u0105\1\207\1\64\1\0\7\64"+
    "\1\0\3\64\2\66\1\0\1\66\2\0\6\64\1\0"+
    "\6\64\1\0\1\64\7\0\2\66\1\67\1\0\1\70"+
    "\1\0\1\71\6\0\1\66\1\0\1\66\104\0\2\u0110"+
    "\52\0\1\64\4\0\1\64\1\0\7\64\1\u0110\3\64"+
    "\6\0\6\64\1\0\6\64\1\0\1\64\16\0\6\212"+
    "\1\u0109\1\212\1\u0109\1\265\1\u010a\14\212\1\123\1\214"+
    "\1\215\1\216\30\212\2\123\1\217\1\212\1\220\1\212"+
    "\1\221\1\212\1\u0111\4\212\1\123\1\212\1\123\2\212"+
    "\1\u0111\14\212\1\263\1\215\1\264\22\212\1\u0111\14\212"+
    "\6\264\1\u010c\1\264\1\u010c\17\264\1\263\1\0\45\264"+
    "\1\266\1\u0112\1\264\1\u0112\1\264\1\u0113\1\264\7\266"+
    "\1\264\3\266\1\216\1\214\1\0\1\216\2\264\6\266"+
    "\1\264\6\266\1\264\1\266\7\264\2\216\1\271\1\264"+
    "\1\272\1\264\1\273\6\215\1\u0114\1\215\1\u0114\1\215"+
    "\1\u0115\14\215\1\326\1\66\1\215\1\66\30\215\2\326"+
    "\1\356\1\215\1\357\1\215\1\275\5\0\2\160\1\0"+
    "\1\160\1\0\1\160\1\0\7\160\1\u0110\3\160\6\0"+
    "\6\160\1\0\6\160\1\0\1\160\56\0\1\u0116\100\0"+
    "\1\u0117\22\0\6\212\1\123\1\212\1\123\17\212\1\263"+
    "\1\215\1\264\37\212\5\264\1\266\1\u0112\1\264\1\u0112"+
    "\1\324\1\u0113\1\264\7\266\1\264\3\266\1\216\1\214"+
    "\1\0\1\216\2\264\6\266\1\264\6\266\1\264\1\266"+
    "\7\264\2\216\1\271\1\264\1\272\1\264\1\273\1\264"+
    "\1\u0118\3\264\1\266\1\216\1\264\1\216\1\264\1\266"+
    "\1\u0118\7\266\1\264\3\266\1\264\1\263\1\0\3\264"+
    "\6\266\1\264\6\266\1\264\1\266\1\264\1\u0118\14\264"+
    "\6\215\1\u0114\1\215\1\u0114\1\u0100\1\u0115\14\215\1\326"+
    "\1\66\1\215\1\66\30\215\2\326\1\356\1\215\1\357"+
    "\1\215\1\275\1\215\1\u0119\4\215\1\u011a\1\215\1\u011a"+
    "\2\215\1\u0119\14\215\1\0\1\215\1\0\22\215\1\u0119"+
    "\14\215\23\0\2\u011b\57\0\1\u011c\24\0\1\u011c\32\0"+
    "\6\264\1\216\1\264\1\216\17\264\1\263\1\0\40\264"+
    "\6\215\1\u011a\1\215\1\u011a\17\215\1\0\1\215\1\0"+
    "\45\215\1\u011d\1\215\1\u011d\1\215\1\u011e\14\215\1\326"+
    "\1\66\1\215\1\66\30\215\2\326\1\356\1\215\1\357"+
    "\1\215\1\275\21\0\1\u011f\70\0\1\u0120\51\0\6\215"+
    "\1\u011d\1\215\1\u011d\1\u0100\1\u011e\14\215\1\326\1\66"+
    "\1\215\1\66\30\215\2\326\1\356\1\215\1\357\1\215"+
    "\1\275\1\215\1\u0121\4\215\1\326\1\215\1\326\2\215"+
    "\1\u0121\14\215\1\0\1\215\1\0\22\215\1\u0121\14\215"+
    "\31\0\1\u0122\40\0\6\215\1\326\1\215\1\326\17\215"+
    "\1\0\1\215\1\0\37\215\61\0\1\u0123\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\41\1\1\11\13\1\2\0"+
    "\2\1\4\0\6\1\1\0\2\1\1\0\11\1\1\11"+
    "\2\1\2\0\2\1\1\11\10\1\3\0\4\1\1\0"+
    "\4\1\1\0\12\1\2\0\5\1\2\0\3\1\1\11"+
    "\4\1\1\0\1\1\2\0\3\1\1\0\1\1\1\0"+
    "\11\1\2\0\2\1\2\0\13\1\1\0\4\1\1\0"+
    "\1\1\2\0\1\1\2\0\2\1\1\0\1\1\4\0"+
    "\1\1\1\0\2\1\2\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0"+
    "\1\1\2\0\2\1\1\0\5\1\1\0\1\1\3\0"+
    "\3\1\1\0\3\1\1\0\4\1\2\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\4\1\1\0\2\1\2\0"+
    "\3\1\2\0\2\1\2\0\1\1\1\0\3\1\3\0"+
    "\2\1\2\0\2\1\1\0\1\11\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* Cï¿½digo personalizado */
 
 // Se agregï¿½ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABC(java.io.Reader in) {
   /* Cï¿½digo que se ejecutarï¿½ en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* Cï¿½digo a ejecutar al finalizar el anï¿½lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Espacios y tabuladores
            }
          case 20: break;
          case 2: 
            { Token t = new Token(yytext(), Types.ERROR_INVALID_CHARACTER, yyline);
    this._existenTokens = true;
    return t;
            }
          case 21: break;
          case 3: 
            { /*Token t = new Token("Enter", Types.IDENTIFIER);
 this._existenTokens = true;
 return t;*/
            }
          case 22: break;
          case 4: 
            { Token t = new Token(yytext(), Types.IDENTIFIER, yyline);
    if (yytext().length()>127){
        t.setType(Types.ERROR_INVALID_LENGTH);
    }
     this._existenTokens = true;
     return t;
            }
          case 23: break;
          case 5: 
            { Token t = new Token(yytext(), Types.INTEGER_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 24: break;
          case 6: 
            { Token t = new Token(yytext(), Types.ERROR_INTEGER, yyline);
    this._existenTokens = true;
    return t;
            }
          case 25: break;
          case 7: 
            { Token t = new Token(yytext(), Types.OPERATOR, yyline);
    this._existenTokens = true;
    return t;
            }
          case 26: break;
          case 8: 
            { Token t = new Token(yytext(), Types.ERROR_COMMENT, yyline);
    this._existenTokens = true;
    return t;
            }
          case 27: break;
          case 9: 
            { Token t = new Token(yytext(), Types.ERROR_STRING, yyline);
    this._existenTokens = true;
    return t;
            }
          case 28: break;
          case 10: 
            { Token t = new Token(yytext(), Types.ERROR_IDENTIFIER, yyline);
    this._existenTokens = true;
    return t;
            }
          case 29: break;
          case 11: 
            { Token t = new Token(yytext(), Types.ERROR_FLOATING_POINT, yyline);
    this._existenTokens = true;
    return t;
            }
          case 30: break;
          case 12: 
            { Token t = new Token(yytext(), Types.RESERVED, yyline);
    this._existenTokens = true;
    return t;
            }
          case 31: break;
          case 13: 
            { Token t = new Token(yytext(), Types.LOGICAL_OPERATOR, yyline);
    this._existenTokens = true;
    return t;
            }
          case 32: break;
          case 14: 
            { // Comentario de bloque 1
            }
          case 33: break;
          case 15: 
            { Token t = new Token(yytext(), Types.NUMERIC_CHAR_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 34: break;
          case 16: 
            { Token t = new Token(yytext(), Types.STRING_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 35: break;
          case 17: 
            { Token t = new Token(yytext(), Types.FLOATING_POINT_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 36: break;
          case 18: 
            { Token t = new Token(yytext(), Types.CHAR_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 37: break;
          case 19: 
            { Token t = new Token(yytext(), Types.SCIENTIFIC_NOTATION_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

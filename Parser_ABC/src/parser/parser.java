
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\012\000\002\002\004\000\002\003" +
    "\004\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\002\000\002\005\004\000\002" +
    "\006\007\000\002\007\005\000\002\007\002\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\004" +
    "\000\002\011\004\000\002\011\002\000\002\012\013\000" +
    "\002\013\006\000\002\013\002\000\002\014\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\002\000\002\016\012\000\002\016\006\000" +
    "\002\017\003\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\004\000\002\020" +
    "\002\000\002\021\010\000\002\022\013\000\002\023\004" +
    "\000\002\023\006\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\005\000\002\030\005\000\002\030\005" +
    "\000\002\024\005\000\002\025\011\000\002\025\005\000" +
    "\002\026\010\000\002\026\005\000\002\027\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\004\023\005\001\002\000\004\002\250\001" +
    "\002\000\004\004\006\001\002\000\004\031\007\001\002" +
    "\000\006\004\220\055\ufff7\001\002\000\004\055\011\001" +
    "\002\000\004\004\210\001\002\000\010\025\uffed\037\015" +
    "\044\013\001\002\000\004\004\017\001\002\000\004\025" +
    "\203\001\002\000\004\004\017\001\002\000\004\025\uffef" +
    "\001\002\000\004\017\020\001\002\000\010\030\023\041" +
    "\024\050\021\001\002\000\006\004\ufff0\062\ufff0\001\002" +
    "\000\004\004\025\001\002\000\006\004\ufff1\062\ufff1\001" +
    "\002\000\006\004\ufff2\062\ufff2\001\002\000\006\020\uffea" +
    "\063\026\001\002\000\010\030\023\041\024\050\021\001" +
    "\002\000\004\020\030\001\002\000\004\025\031\001\002" +
    "\000\004\031\007\001\002\000\004\055\011\001\002\000" +
    "\004\034\034\001\002\000\004\025\uffec\001\002\000\020" +
    "\004\050\034\uffe1\036\043\040\045\045\036\056\037\057" +
    "\047\001\002\000\004\017\172\001\002\000\012\004\142" +
    "\017\141\035\140\053\136\001\002\000\016\005\uffe6\007" +
    "\uffe6\020\uffe6\032\uffe6\033\uffe6\034\uffe6\001\002\000\016" +
    "\005\uffe3\007\uffe3\020\uffe3\032\uffe3\033\uffe3\034\uffe3\001" +
    "\002\000\016\005\uffe5\007\uffe5\020\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\001\002\000\004\004\155\001\002\000\004\034" +
    "\uffe9\001\002\000\004\017\133\001\002\000\016\005\uffe4" +
    "\007\uffe4\020\uffe4\032\uffe4\033\uffe4\034\uffe4\001\002\000" +
    "\004\017\126\001\002\000\006\017\055\060\054\001\002" +
    "\000\016\005\uffe7\007\uffe7\020\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\001\002\000\016\005\uffe8\007\uffe8\020\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\001\002\000\016\005\uffe2\007\uffe2\020" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\001\002\000\030\004\076" +
    "\011\066\012\072\013\064\014\071\015\077\016\075\017" +
    "\100\035\073\053\067\064\065\001\002\000\012\020\057" +
    "\030\023\041\024\050\021\001\002\000\004\004\060\001" +
    "\002\000\016\005\uffc5\007\uffc5\020\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\001\002\000\006\020\uffea\063\026\001\002\000" +
    "\004\020\062\001\002\000\032\004\050\005\uffe1\007\uffe1" +
    "\020\uffe1\032\uffe1\033\uffe1\034\uffe1\036\043\040\045\045" +
    "\036\056\037\057\047\001\002\000\016\005\uffc6\007\uffc6" +
    "\020\uffc6\032\uffc6\033\uffc6\034\uffc6\001\002\000\006\005" +
    "\105\007\103\001\002\000\030\004\076\011\066\012\072" +
    "\013\064\014\071\015\077\016\075\017\100\035\073\053" +
    "\067\064\065\001\002\000\006\005\105\007\103\001\002" +
    "\000\006\005\105\007\103\001\002\000\016\005\uffc7\007" +
    "\uffc7\020\uffc7\032\uffc7\033\uffc7\034\uffc7\001\002\000\006" +
    "\005\105\007\103\001\002\000\006\005\105\007\103\001" +
    "\002\000\006\005\105\007\103\001\002\000\006\005\105" +
    "\007\103\001\002\000\006\005\105\007\103\001\002\000" +
    "\010\005\105\007\103\017\055\001\002\000\006\005\105" +
    "\007\103\001\002\000\030\004\076\011\066\012\072\013" +
    "\064\014\071\015\077\016\075\017\100\035\073\053\067" +
    "\064\065\001\002\000\004\020\102\001\002\000\006\005" +
    "\105\007\103\001\002\000\030\004\076\011\066\012\072" +
    "\013\064\014\071\015\077\016\075\017\100\035\073\053" +
    "\067\064\065\001\002\000\020\005\uffd4\007\uffd4\020\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\052\uffd4\001\002\000\030\004" +
    "\076\011\066\012\072\013\064\014\071\015\077\016\075" +
    "\017\100\035\073\053\067\064\065\001\002\000\006\005" +
    "\105\007\103\001\002\000\020\005\uffc9\007\uffc9\020\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\052\uffc9\001\002\000\006\005" +
    "\105\007\103\001\002\000\020\005\uffc8\007\uffc8\020\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\052\uffc8\001\002\000\020\005" +
    "\uffcc\007\uffcc\020\uffcc\032\uffcc\033\uffcc\034\uffcc\052\uffcc" +
    "\001\002\000\020\005\uffd5\007\uffd5\020\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\052\uffd5\001\002\000\020\005\uffcd\007\uffcd" +
    "\020\uffcd\032\uffcd\033\uffcd\034\uffcd\052\uffcd\001\002\000" +
    "\020\005\uffcb\007\uffcb\020\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\052\uffcb\001\002\000\020\005\uffd2\007\uffd2\020\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\052\uffd2\001\002\000\020\005\uffd0" +
    "\007\uffd0\020\uffd0\032\uffd0\033\uffd0\034\uffd0\052\uffd0\001" +
    "\002\000\020\005\uffce\007\uffce\020\uffce\032\uffce\033\uffce" +
    "\034\uffce\052\uffce\001\002\000\020\005\uffd3\007\uffd3\020" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\052\uffd3\001\002\000\020" +
    "\005\uffd1\007\uffd1\020\uffd1\032\uffd1\033\uffd1\034\uffd1\052" +
    "\uffd1\001\002\000\006\005\105\007\103\001\002\000\020" +
    "\005\uffca\007\uffca\020\uffca\032\uffca\033\uffca\034\uffca\052" +
    "\uffca\001\002\000\020\005\uffcf\007\uffcf\020\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\052\uffcf\001\002\000\010\030\023\041" +
    "\024\050\021\001\002\000\004\004\130\001\002\000\006" +
    "\020\uffea\063\026\001\002\000\004\020\132\001\002\000" +
    "\016\005\uffc2\007\uffc2\020\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\001\002\000\014\003\135\004\142\017\141\035\140\053" +
    "\136\001\002\000\006\020\uffda\032\uffda\001\002\000\004" +
    "\020\154\001\002\000\006\020\uffdc\032\uffdc\001\002\000" +
    "\004\020\145\001\002\000\006\020\uffdb\032\uffdb\001\002" +
    "\000\012\004\142\017\141\035\140\053\136\001\002\000" +
    "\010\017\055\020\uffde\032\uffde\001\002\000\004\020\144" +
    "\001\002\000\006\020\uffdd\032\uffdd\001\002\000\004\051" +
    "\146\001\002\000\022\004\050\033\uffe1\034\uffe1\036\043" +
    "\040\045\045\036\056\037\057\047\001\002\000\006\033" +
    "\150\034\uffd8\001\002\000\020\004\050\034\uffe1\036\043" +
    "\040\045\045\036\056\037\057\047\001\002\000\004\034" +
    "\152\001\002\000\016\005\uffe0\007\uffe0\020\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\001\002\000\004\034\uffd9\001\002\000" +
    "\016\005\uffdf\007\uffdf\020\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\001\002\000\030\004\076\011\066\012\072\013\064\014" +
    "\071\015\077\016\075\017\100\035\073\053\067\064\065" +
    "\001\002\000\004\052\157\001\002\000\030\004\076\011" +
    "\066\012\072\013\064\014\071\015\077\016\075\017\100" +
    "\035\073\053\067\064\065\001\002\000\004\032\161\001" +
    "\002\000\004\025\162\001\002\000\020\004\050\034\uffe1" +
    "\036\043\040\045\045\036\056\037\057\047\001\002\000" +
    "\004\034\164\001\002\000\016\005\uffd6\007\uffd6\020\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\001\002\000\004\032\166\001" +
    "\002\000\004\025\167\001\002\000\020\004\050\034\uffe1" +
    "\036\043\040\045\045\036\056\037\057\047\001\002\000" +
    "\004\034\171\001\002\000\016\005\uffd7\007\uffd7\020\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\001\002\000\012\020\174\030" +
    "\023\041\024\050\021\001\002\000\004\004\175\001\002" +
    "\000\016\005\uffc3\007\uffc3\020\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\001\002\000\004\020\176\001\002\000\032\004\050" +
    "\005\uffe1\007\uffe1\020\uffe1\032\uffe1\033\uffe1\034\uffe1\036" +
    "\043\040\045\045\036\056\037\057\047\001\002\000\016" +
    "\005\uffc4\007\uffc4\020\uffc4\032\uffc4\033\uffc4\034\uffc4\001" +
    "\002\000\004\004\201\001\002\000\006\020\uffea\063\026" +
    "\001\002\000\004\020\uffeb\001\002\000\020\004\050\034" +
    "\uffe1\036\043\040\045\045\036\056\037\057\047\001\002" +
    "\000\004\034\205\001\002\000\004\002\001\001\002\000" +
    "\004\025\uffee\001\002\000\026\004\ufff6\025\ufff6\034\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\044\ufff6\045\ufff6\056\ufff6\057" +
    "\ufff6\001\002\000\006\063\211\065\ufff3\001\002\000\004" +
    "\004\216\001\002\000\004\065\213\001\002\000\010\030" +
    "\023\041\024\050\021\001\002\000\004\062\215\001\002" +
    "\000\026\004\ufff5\025\ufff5\034\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\044\ufff5\045\ufff5\056\ufff5\057\ufff5\001\002\000\006" +
    "\063\211\065\ufff3\001\002\000\004\065\ufff4\001\002\000" +
    "\004\060\222\001\002\000\004\055\uffff\001\002\000\020" +
    "\011\224\012\226\013\231\014\227\015\225\016\230\061" +
    "\223\001\002\000\004\062\246\001\002\000\004\062\244" +
    "\001\002\000\004\062\242\001\002\000\004\062\240\001" +
    "\002\000\004\062\236\001\002\000\004\062\234\001\002" +
    "\000\004\062\232\001\002\000\006\004\220\055\ufff7\001" +
    "\002\000\004\055\ufff8\001\002\000\006\004\220\055\ufff7" +
    "\001\002\000\004\055\ufff9\001\002\000\006\004\220\055" +
    "\ufff7\001\002\000\004\055\ufffc\001\002\000\006\004\220" +
    "\055\ufff7\001\002\000\004\055\ufffd\001\002\000\006\004" +
    "\220\055\ufff7\001\002\000\004\055\ufffb\001\002\000\006" +
    "\004\220\055\ufff7\001\002\000\004\055\ufffa\001\002\000" +
    "\006\004\220\055\ufff7\001\002\000\004\055\ufffe\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\004\004\220" +
    "\001\001\000\004\005\011\001\001\000\004\006\206\001" +
    "\001\000\004\011\013\001\001\000\004\012\205\001\001" +
    "\000\002\001\001\000\004\012\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\026\001\001\000\004\010\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\031\014" +
    "\032\001\001\000\004\005\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\043\016\051\021\050\022" +
    "\037\024\041\025\045\026\040\027\052\001\001\000\002" +
    "\001\001\000\006\017\164\025\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\067\025\073\001" +
    "\001\000\004\010\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\060\001\001\000\002\001\001\000" +
    "\022\015\062\016\051\021\050\022\037\024\041\025\045" +
    "\026\040\027\052\001\001\000\002\001\001\000\004\030" +
    "\124\001\001\000\006\023\122\025\073\001\001\000\004" +
    "\030\121\001\001\000\004\030\120\001\001\000\002\001" +
    "\001\000\004\030\117\001\001\000\004\030\116\001\001" +
    "\000\004\030\115\001\001\000\004\030\114\001\001\000" +
    "\004\030\113\001\001\000\004\030\112\001\001\000\004" +
    "\030\111\001\001\000\006\023\100\025\073\001\001\000" +
    "\002\001\001\000\004\030\103\001\001\000\006\023\107" +
    "\025\073\001\001\000\002\001\001\000\006\023\105\025" +
    "\073\001\001\000\004\030\106\001\001\000\002\001\001" +
    "\000\004\030\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\126\001" +
    "\001\000\002\001\001\000\004\013\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\136\025\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\142\025" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\146\016\051\021" +
    "\050\022\037\024\041\025\045\026\040\027\052\001\001" +
    "\000\004\020\150\001\001\000\022\015\152\016\051\021" +
    "\050\022\037\024\041\025\045\026\040\027\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\155\025\073\001\001\000\002" +
    "\001\001\000\006\023\157\025\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\162\016\051\021\050" +
    "\022\037\024\041\025\045\026\040\027\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\167\016\051\021\050\022\037\024" +
    "\041\025\045\026\040\027\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\176" +
    "\016\051\021\050\022\037\024\041\025\045\026\040\027" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\201\001\001\000\002\001\001\000\022\015\203\016" +
    "\051\021\050\022\037\024\041\025\045\026\040\027\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\232\001\001\000\002" +
    "\001\001\000\004\004\234\001\001\000\002\001\001\000" +
    "\004\004\236\001\001\000\002\001\001\000\004\004\240" +
    "\001\001\000\002\001\001\000\004\004\242\001\001\000" +
    "\002\001\001\000\004\004\244\001\001\000\002\001\001" +
    "\000\004\004\246\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }







/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constants_body ::= IDENTIFIER EQUAL LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constants_body ::= IDENTIFIER EQUAL INTEGER_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constants_body ::= IDENTIFIER EQUAL STRING_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constants_body ::= IDENTIFIER EQUAL CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants_body ::= IDENTIFIER EQUAL FLOATING_POINT_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants_body ::= IDENTIFIER EQUAL NUMERIC_CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constants_body ::= IDENTIFIER EQUAL SCIENTIFIC_NOTATION_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // globals_body ::= IDENTIFIER globals_list COLON Type SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // globals_list ::= COMMA IDENTIFIER globals_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functions ::= FUNCTION function_header 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // functions ::= PROCEDURE function_header 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameter_list ::= COMMA Type IDENTIFIER parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_body ::= constants globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statements ::= write 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_statement ::= IF OPEN_PARENTHESIS error CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		
                                                            //RESULT = new ErrorExprListNode( "ExprListError ..." ); 
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // else_statement ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while_statement ::= WHILE cond DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // for_statement ::= FOR IDENTIFIER exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int EQUALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int EQUALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object EQUAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= IDENTIFIER exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= TRUE exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= FALSE exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= FLOATING_POINT_NUMERIC_LITERAL exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= INTEGER_NUMERIC_LITERAL exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= STRING_LITERAL exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= NUMERIC_CHAR_LITERAL exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= CHAR_LITERAL exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= fun_call exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= MINUSOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp2 ::= BOOLEAN_OPERATOR exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp2 ::= ARITHMETICOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= IDENTIFIER EQUAL exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // read ::= READ OPEN_PARENTHESIS Type IDENTIFIER CLOSE_PARENTHESIS statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // write ::= WRITE OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

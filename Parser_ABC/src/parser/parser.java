
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\012\000\002\002\004\000\002\002" +
    "\012\000\002\002\011\000\002\002\011\000\002\002\010" +
    "\000\002\002\003\000\002\003\004\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\006\000\002\004\002\000\002\005\004\000\002\006\002" +
    "\000\002\006\010\000\002\006\010\000\002\006\004\000" +
    "\002\007\005\000\002\007\002\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\002\000\002\040\002" +
    "\000\002\011\006\000\002\012\012\000\002\012\015\000" +
    "\002\012\013\000\002\012\013\000\002\035\010\000\002" +
    "\035\013\000\002\013\006\000\002\013\006\000\002\013" +
    "\002\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\002\000\002\017\012\000\002\017\012\000\002\017\011" +
    "\000\002\017\011\000\002\020\004\000\002\020\006\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\002\000\002\021\004\000\002\021\002\000\002\022\012" +
    "\000\002\022\010\000\002\022\012\000\002\022\012\000" +
    "\002\022\011\000\002\022\011\000\002\023\013\000\002" +
    "\023\012\000\002\023\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\024\004\000\002\031\003\000" +
    "\002\031\004\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\002\000\002\026\007\000" +
    "\002\026\005\000\002\026\007\000\002\026\006\000\002" +
    "\026\005\000\002\014\002\000\002\014\005\000\002\025" +
    "\007\000\002\025\007\000\002\027\007\000\002\027\005" +
    "\000\002\030\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\006\003\005\023\006\001\002\000\004\002" +
    "\u0136\001\002\000\004\002\ufffb\001\002\000\004\004\007" +
    "\001\002\000\014\025\uffe3\031\010\037\016\044\012\055" +
    "\011\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\032\003\u010d\004\u010f\025\uffef\031\uffef" +
    "\034\uffef\036\uffef\037\uffef\040\uffef\044\uffef\045\uffef\056" +
    "\uffef\057\uffef\001\002\000\006\003\374\004\375\001\002" +
    "\000\012\025\uffe3\037\016\044\012\055\011\001\002\000" +
    "\012\025\uffe3\031\010\037\016\044\012\001\002\000\004" +
    "\025\346\001\002\000\006\003\017\004\021\001\002\000" +
    "\004\034\345\001\002\000\010\025\uffe3\037\016\044\012" +
    "\001\002\000\004\017\022\001\002\000\012\020\025\030" +
    "\026\041\027\050\023\001\002\000\010\004\uffe7\025\uffe7" +
    "\062\uffe7\001\002\000\004\004\324\001\002\000\004\065" +
    "\030\001\002\000\010\004\uffe8\025\uffe8\062\uffe8\001\002" +
    "\000\010\004\uffe9\025\uffe9\062\uffe9\001\002\000\010\030" +
    "\026\041\027\050\023\001\002\000\004\025\032\001\002" +
    "\000\024\004\040\031\010\034\uffcb\036\051\040\041\045" +
    "\033\055\011\056\036\057\042\001\002\000\004\017\317" +
    "\001\002\000\022\004\040\031\010\034\uffcb\036\051\040" +
    "\041\045\033\056\036\057\042\001\002\000\022\004\040" +
    "\033\uffcb\034\uffcb\036\051\040\041\045\033\056\036\057" +
    "\042\001\002\000\006\003\260\017\261\001\002\000\022" +
    "\004\040\033\uffcb\034\uffcb\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\010\003\104\017\105\065\251" +
    "\001\002\000\006\003\200\017\201\001\002\000\004\017" +
    "\173\001\002\000\022\004\040\033\uffcb\034\uffcb\036\051" +
    "\040\041\045\033\056\036\057\042\001\002\000\022\004" +
    "\040\033\uffcb\034\uffcb\036\051\040\041\045\033\056\036" +
    "\057\042\001\002\000\022\004\040\033\uffcb\034\uffcb\036" +
    "\051\040\041\045\033\056\036\057\042\001\002\000\022" +
    "\004\040\033\uffcb\034\uffcb\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\004\034\uffd3\001\002\000\022" +
    "\004\040\033\uffcb\034\uffcb\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\006\003\060\004\061\001\002" +
    "\000\004\034\057\001\002\000\022\004\040\034\uffcb\036" +
    "\051\040\041\045\033\055\011\056\036\057\042\001\002" +
    "\000\020\004\040\034\uffcb\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\004\034\uffd4\001\002\000\004" +
    "\034\uffd7\001\002\000\010\025\uffe0\037\uffe0\044\uffe0\001" +
    "\002\000\006\034\160\052\157\001\002\000\032\004\076" +
    "\007\075\011\064\012\070\013\062\014\067\015\077\016" +
    "\074\017\101\035\071\053\065\064\063\001\002\000\024" +
    "\005\uffb0\007\uffb0\020\uffb0\032\uffb0\052\uffb0\060\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\001\002\000\032\004\076\007\075" +
    "\011\064\012\070\013\062\014\067\015\077\016\074\017" +
    "\101\035\071\053\065\064\063\001\002\000\024\005\uffb2" +
    "\007\uffb2\020\uffb2\032\uffb2\052\uffb2\060\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\001\002\000\024\005\uffa8\007\uffa8\020\uffa8" +
    "\032\uffa8\052\uffa8\060\uffa8\062\uffa8\063\uffa8\064\uffa8\001" +
    "\002\000\004\052\150\001\002\000\024\005\uffaf\007\uffaf" +
    "\020\uffaf\032\uffaf\052\uffaf\060\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\001\002\000\024\005\uffb1\007\uffb1\020\uffb1\032\uffb1" +
    "\052\uffb1\060\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000" +
    "\024\005\uffa7\007\uffa7\020\uffa7\032\uffa7\052\uffa7\060\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\001\002\000\024\005\uffa5\007" +
    "\uffa5\020\uffa5\032\uffa5\052\uffa5\060\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\001\002\000\024\005\137\007\133\020\uff9f\032" +
    "\uff9f\052\uff9f\060\135\062\uff9f\063\uff9f\064\134\001\002" +
    "\000\024\005\uffae\007\uffae\020\uffae\032\uffae\052\uffae\060" +
    "\uffae\062\uffae\063\uffae\064\uffae\001\002\000\004\004\132" +
    "\001\002\000\030\003\104\005\uffab\007\uffab\017\105\020" +
    "\uffab\032\uffab\052\uffab\060\uffab\062\uffab\063\uffab\064\uffab" +
    "\001\002\000\024\005\uffad\007\uffad\020\uffad\032\uffad\052" +
    "\uffad\060\uffad\062\uffad\063\uffad\064\uffad\001\002\000\024" +
    "\005\uffa6\007\uffa6\020\uffa6\032\uffa6\052\uffa6\060\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\001\002\000\032\004\076\007\075" +
    "\011\064\012\070\013\062\014\067\015\077\016\074\017" +
    "\101\035\071\053\065\064\063\001\002\000\004\020\103" +
    "\001\002\000\024\005\uffa9\007\uffa9\020\uffa9\032\uffa9\052" +
    "\uffa9\060\uffa9\062\uffa9\063\uffa9\064\uffa9\001\002\000\006" +
    "\020\127\062\130\001\002\000\036\003\107\004\076\007" +
    "\075\011\064\012\070\013\062\014\067\015\077\016\074" +
    "\017\101\020\110\035\071\053\065\064\063\001\002\000" +
    "\006\020\uff99\063\113\001\002\000\004\020\111\001\002" +
    "\000\044\004\uff9d\005\uff9d\007\uff9d\020\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\036\uff9d\040\uff9d\045\uff9d\052\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\062\uff9d\063\uff9d\064\uff9d\001\002\000" +
    "\004\062\112\001\002\000\044\004\uff9c\005\uff9c\007\uff9c" +
    "\020\uff9c\032\uff9c\033\uff9c\034\uff9c\036\uff9c\040\uff9c\045" +
    "\uff9c\052\uff9c\056\uff9c\057\uff9c\060\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\001\002\000\032\004\076\007\075\011\064\012" +
    "\070\013\062\014\067\015\077\016\074\017\101\035\071" +
    "\053\065\064\063\001\002\000\004\020\115\001\002\000" +
    "\044\004\uff9e\005\uff9e\007\uff9e\020\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\036\uff9e\040\uff9e\045\uff9e\052\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\062\uff9e\063\uff9e\064\uff9e\001\002\000\006" +
    "\020\uffd8\063\117\001\002\000\012\003\122\030\026\041" +
    "\027\050\023\001\002\000\004\020\uff98\001\002\000\004" +
    "\004\125\001\002\000\004\004\123\001\002\000\006\020" +
    "\uffd8\063\117\001\002\000\004\020\uffd9\001\002\000\006" +
    "\020\uffd8\063\117\001\002\000\004\020\uffda\001\002\000" +
    "\004\062\131\001\002\000\044\004\uff9a\005\uff9a\007\uff9a" +
    "\020\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a\040\uff9a\045" +
    "\uff9a\052\uff9a\056\uff9a\057\uff9a\060\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\001\002\000\044\004\uff9b\005\uff9b\007\uff9b\020" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\036\uff9b\040\uff9b\045\uff9b" +
    "\052\uff9b\056\uff9b\057\uff9b\060\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\001\002\000\024\005\uffaa\007\uffaa\020\uffaa\032\uffaa" +
    "\052\uffaa\060\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000" +
    "\032\004\076\007\075\011\064\012\070\013\062\014\067" +
    "\015\077\016\074\017\101\035\071\053\065\064\063\001" +
    "\002\000\032\004\076\007\075\011\064\012\070\013\062" +
    "\014\067\015\077\016\074\017\101\035\071\053\065\064" +
    "\063\001\002\000\032\004\076\007\075\011\064\012\070" +
    "\013\062\014\067\015\077\016\074\017\101\035\071\053" +
    "\065\064\063\001\002\000\024\005\uffac\007\uffac\020\uffac" +
    "\032\uffac\052\uffac\060\uffac\062\uffac\063\uffac\064\uffac\001" +
    "\002\000\032\004\076\007\075\011\064\012\070\013\062" +
    "\014\067\015\077\016\074\017\101\035\071\053\065\064" +
    "\063\001\002\000\024\005\137\007\133\020\uff9f\032\uff9f" +
    "\052\uff9f\060\135\062\uff9f\063\uff9f\064\134\001\002\000" +
    "\024\005\uffa3\007\uffa3\020\uffa3\032\uffa3\052\uffa3\060\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\001\002\000\024\005\137\007" +
    "\133\020\uff9f\032\uff9f\052\uff9f\060\135\062\uff9f\063\uff9f" +
    "\064\134\001\002\000\024\005\uffa1\007\uffa1\020\uffa1\032" +
    "\uffa1\052\uffa1\060\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002" +
    "\000\024\005\137\007\133\020\uff9f\032\uff9f\052\uff9f\060" +
    "\135\062\uff9f\063\uff9f\064\134\001\002\000\024\005\uffa0" +
    "\007\uffa0\020\uffa0\032\uffa0\052\uffa0\060\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\001\002\000\024\005\137\007\133\020\uff9f" +
    "\032\uff9f\052\uff9f\060\135\062\uff9f\063\uff9f\064\134\001" +
    "\002\000\024\005\uffa2\007\uffa2\020\uffa2\032\uffa2\052\uffa2" +
    "\060\uffa2\062\uffa2\063\uffa2\064\uffa2\001\002\000\032\004" +
    "\076\007\075\011\064\012\070\013\062\014\067\015\077" +
    "\016\074\017\101\035\071\053\065\064\063\001\002\000" +
    "\004\032\152\001\002\000\004\025\153\001\002\000\020" +
    "\004\040\034\uffcb\036\051\040\041\045\033\056\036\057" +
    "\042\001\002\000\004\034\155\001\002\000\022\004\uffb5" +
    "\033\uffb5\034\uffb5\036\uffb5\040\uffb5\045\uffb5\056\uffb5\057" +
    "\uffb5\001\002\000\024\005\uffa4\007\uffa4\020\uffa4\032\uffa4" +
    "\052\uffa4\060\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002\000" +
    "\032\004\076\007\075\011\064\012\070\013\062\014\067" +
    "\015\077\016\074\017\101\035\071\053\065\064\063\001" +
    "\002\000\022\004\uffb3\033\uffb3\034\uffb3\036\uffb3\040\uffb3" +
    "\045\uffb3\056\uffb3\057\uffb3\001\002\000\004\032\162\001" +
    "\002\000\004\025\163\001\002\000\020\004\040\034\uffcb" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\004\034\165\001\002\000\022\004\uffb4\033\uffb4\034\uffb4" +
    "\036\uffb4\040\uffb4\045\uffb4\056\uffb4\057\uffb4\001\002\000" +
    "\006\033\uffce\034\uffce\001\002\000\006\033\uffcc\034\uffcc" +
    "\001\002\000\006\033\uffcd\034\uffcd\001\002\000\006\033" +
    "\uffcf\034\uffcf\001\002\000\006\033\uffd0\034\uffd0\001\002" +
    "\000\032\004\076\007\075\011\064\012\070\013\062\014" +
    "\067\015\077\016\074\017\101\035\071\053\065\064\063" +
    "\001\002\000\006\020\uff99\063\113\001\002\000\004\020" +
    "\176\001\002\000\004\062\177\001\002\000\022\004\uff93" +
    "\033\uff93\034\uff93\036\uff93\040\uff93\045\uff93\056\uff93\057" +
    "\uff93\001\002\000\004\020\244\001\002\000\030\003\205" +
    "\004\207\011\064\012\070\013\062\014\067\015\077\016" +
    "\074\017\211\035\204\053\202\001\002\000\010\005\216" +
    "\020\uffbe\060\215\001\002\000\010\005\216\020\uffbe\060" +
    "\215\001\002\000\010\005\216\020\uffbe\060\215\001\002" +
    "\000\004\020\234\001\002\000\004\020\223\001\002\000" +
    "\014\003\104\005\216\017\105\020\uffbe\060\215\001\002" +
    "\000\010\005\216\020\uffbe\060\215\001\002\000\026\004" +
    "\207\011\064\012\070\013\062\014\067\015\077\016\074" +
    "\017\211\035\204\053\202\001\002\000\004\020\213\001" +
    "\002\000\010\005\216\020\uffbe\060\215\001\002\000\004" +
    "\020\uffc5\001\002\000\026\004\207\011\064\012\070\013" +
    "\062\014\067\015\077\016\074\017\211\035\204\053\202" +
    "\001\002\000\026\004\207\011\064\012\070\013\062\014" +
    "\067\015\077\016\074\017\211\035\204\053\202\001\002" +
    "\000\004\020\uffc0\001\002\000\004\020\uffbf\001\002\000" +
    "\004\020\uffc2\001\002\000\004\020\uffc6\001\002\000\004" +
    "\051\224\001\002\000\024\003\226\004\040\033\uffcb\034" +
    "\uffcb\036\051\040\041\045\033\056\036\057\042\001\002" +
    "\000\006\033\230\034\uffbc\001\002\000\004\034\227\001" +
    "\002\000\022\004\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7" +
    "\045\uffc7\056\uffc7\057\uffc7\001\002\000\020\004\040\034" +
    "\uffcb\036\051\040\041\045\033\056\036\057\042\001\002" +
    "\000\004\034\232\001\002\000\022\004\uffca\033\uffca\034" +
    "\uffca\036\uffca\040\uffca\045\uffca\056\uffca\057\uffca\001\002" +
    "\000\004\034\uffbd\001\002\000\004\051\235\001\002\000" +
    "\022\004\040\033\uffcb\034\uffcb\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\006\033\230\034\uffbc\001" +
    "\002\000\004\034\240\001\002\000\022\004\uffc9\033\uffc9" +
    "\034\uffc9\036\uffc9\040\uffc9\045\uffc9\056\uffc9\057\uffc9\001" +
    "\002\000\004\020\uffc3\001\002\000\004\020\uffc1\001\002" +
    "\000\004\020\uffc4\001\002\000\004\051\245\001\002\000" +
    "\022\004\040\033\uffcb\034\uffcb\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\006\033\230\034\uffbc\001" +
    "\002\000\004\034\250\001\002\000\022\004\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\040\uffc8\045\uffc8\056\uffc8\057\uffc8\001" +
    "\002\000\004\060\252\001\002\000\034\003\254\004\076" +
    "\007\075\011\064\012\070\013\062\014\067\015\077\016" +
    "\074\017\101\035\071\053\065\064\063\001\002\000\004" +
    "\062\256\001\002\000\004\062\255\001\002\000\022\004" +
    "\uff96\033\uff96\034\uff96\036\uff96\040\uff96\045\uff96\056\uff96" +
    "\057\uff96\001\002\000\022\004\uff97\033\uff97\034\uff97\036" +
    "\uff97\040\uff97\045\uff97\056\uff97\057\uff97\001\002\000\006" +
    "\033\uffd1\034\uffd1\001\002\000\006\020\303\032\302\001" +
    "\002\000\030\003\263\004\207\011\064\012\070\013\062" +
    "\014\067\015\077\016\074\017\211\035\204\053\202\001" +
    "\002\000\004\020\271\001\002\000\004\020\264\001\002" +
    "\000\004\032\265\001\002\000\004\025\266\001\002\000" +
    "\020\004\040\034\uffcb\036\051\040\041\045\033\056\036" +
    "\057\042\001\002\000\004\034\270\001\002\000\022\004" +
    "\uffb9\033\uffb9\034\uffb9\036\uffb9\040\uffb9\045\uffb9\056\uffb9" +
    "\057\uffb9\001\002\000\004\032\272\001\002\000\006\003" +
    "\273\025\274\001\002\000\004\034\301\001\002\000\022" +
    "\003\276\004\040\034\uffcb\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\004\034\300\001\002\000\004" +
    "\034\277\001\002\000\022\004\uffb8\033\uffb8\034\uffb8\036" +
    "\uffb8\040\uffb8\045\uffb8\056\uffb8\057\uffb8\001\002\000\022" +
    "\004\uffbb\033\uffbb\034\uffbb\036\uffbb\040\uffbb\045\uffbb\056" +
    "\uffbb\057\uffbb\001\002\000\022\004\uffb7\033\uffb7\034\uffb7" +
    "\036\uffb7\040\uffb7\045\uffb7\056\uffb7\057\uffb7\001\002\000" +
    "\004\025\310\001\002\000\004\032\304\001\002\000\004" +
    "\025\305\001\002\000\020\004\040\034\uffcb\036\051\040" +
    "\041\045\033\056\036\057\042\001\002\000\004\034\307" +
    "\001\002\000\022\004\uffb6\033\uffb6\034\uffb6\036\uffb6\040" +
    "\uffb6\045\uffb6\056\uffb6\057\uffb6\001\002\000\020\004\040" +
    "\034\uffcb\036\051\040\041\045\033\056\036\057\042\001" +
    "\002\000\004\034\312\001\002\000\022\004\uffba\033\uffba" +
    "\034\uffba\036\uffba\040\uffba\045\uffba\056\uffba\057\uffba\001" +
    "\002\000\006\033\uffd2\034\uffd2\001\002\000\004\034\uffd5" +
    "\001\002\000\020\004\040\034\uffcb\036\051\040\041\045" +
    "\033\056\036\057\042\001\002\000\004\034\uffd6\001\002" +
    "\000\006\004\320\020\321\001\002\000\004\020\322\001" +
    "\002\000\022\004\uff94\033\uff94\034\uff94\036\uff94\040\uff94" +
    "\045\uff94\056\uff94\057\uff94\001\002\000\004\062\323\001" +
    "\002\000\022\004\uff95\033\uff95\034\uff95\036\uff95\040\uff95" +
    "\045\uff95\056\uff95\057\uff95\001\002\000\010\003\325\020" +
    "\uffd8\063\117\001\002\000\004\020\340\001\002\000\004" +
    "\020\327\001\002\000\006\025\330\065\331\001\002\000" +
    "\004\003\336\001\002\000\010\030\026\041\027\050\023" +
    "\001\002\000\004\025\333\001\002\000\024\004\040\031" +
    "\010\034\uffcb\036\051\040\041\045\033\055\011\056\036" +
    "\057\042\001\002\000\004\034\335\001\002\000\010\025" +
    "\uffdf\037\uffdf\044\uffdf\001\002\000\004\034\337\001\002" +
    "\000\010\025\uffdd\037\uffdd\044\uffdd\001\002\000\004\025" +
    "\341\001\002\000\024\004\040\031\010\034\uffcb\036\051" +
    "\040\041\045\033\055\011\056\036\057\042\001\002\000" +
    "\004\034\343\001\002\000\010\025\uffde\037\uffde\044\uffde" +
    "\001\002\000\004\025\uffe6\001\002\000\004\025\uffe4\001" +
    "\002\000\020\004\040\034\uffcb\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\004\034\350\001\002\000" +
    "\004\002\ufffc\001\002\000\010\025\uffe3\037\016\044\012" +
    "\001\002\000\004\025\353\001\002\000\020\004\040\034" +
    "\uffcb\036\051\040\041\045\033\056\036\057\042\001\002" +
    "\000\004\034\355\001\002\000\004\002\ufffd\001\002\000" +
    "\004\025\357\001\002\000\020\004\040\034\uffcb\036\051" +
    "\040\041\045\033\056\036\057\042\001\002\000\004\034" +
    "\361\001\002\000\004\002\uffff\001\002\000\010\025\uffe3" +
    "\037\016\044\012\001\002\000\004\025\364\001\002\000" +
    "\020\004\040\034\uffcb\036\051\040\041\045\033\056\036" +
    "\057\042\001\002\000\004\034\366\001\002\000\004\002" +
    "\ufffe\001\002\000\004\025\370\001\002\000\020\004\040" +
    "\034\uffcb\036\051\040\041\045\033\056\036\057\042\001" +
    "\002\000\004\034\372\001\002\000\004\002\001\001\002" +
    "\000\010\025\uffe3\037\016\044\012\001\002\000\004\034" +
    "\uffe2\001\002\000\004\017\376\001\002\000\012\020\u0100" +
    "\030\026\041\027\050\023\001\002\000\004\004\u0104\001" +
    "\002\000\004\025\u0101\001\002\000\024\004\040\031\010" +
    "\034\uffcb\036\051\040\041\045\033\055\011\056\036\057" +
    "\042\001\002\000\004\034\u0103\001\002\000\010\025\uffdc" +
    "\037\uffdc\044\uffdc\001\002\000\006\020\uffd8\063\117\001" +
    "\002\000\004\020\u0106\001\002\000\004\025\u0107\001\002" +
    "\000\024\004\040\031\010\034\uffcb\036\051\040\041\045" +
    "\033\055\011\056\036\057\042\001\002\000\004\034\u0109" +
    "\001\002\000\010\025\uffdb\037\uffdb\044\uffdb\001\002\000" +
    "\004\034\u010b\001\002\000\004\025\uffe1\001\002\000\004" +
    "\025\uffe5\001\002\000\004\062\u011b\001\002\000\030\004" +
    "\ufff0\025\ufff0\031\ufff0\034\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\044\ufff0\045\ufff0\056\ufff0\057\ufff0\001\002\000\006\063" +
    "\u0110\065\uffea\001\002\000\004\004\u0119\001\002\000\004" +
    "\065\u0112\001\002\000\012\003\u0114\030\026\041\027\050" +
    "\023\001\002\000\004\062\u0117\001\002\000\004\062\u0115" +
    "\001\002\000\032\003\u010d\004\u010f\025\uffef\031\uffef\034" +
    "\uffef\036\uffef\037\uffef\040\uffef\044\uffef\045\uffef\056\uffef" +
    "\057\uffef\001\002\000\030\004\uffed\025\uffed\031\uffed\034" +
    "\uffed\036\uffed\037\uffed\040\uffed\044\uffed\045\uffed\056\uffed" +
    "\057\uffed\001\002\000\032\003\u010d\004\u010f\025\uffef\031" +
    "\uffef\034\uffef\036\uffef\037\uffef\040\uffef\044\uffef\045\uffef" +
    "\056\uffef\057\uffef\001\002\000\030\004\uffee\025\uffee\031" +
    "\uffee\034\uffee\036\uffee\037\uffee\040\uffee\044\uffee\045\uffee" +
    "\056\uffee\057\uffee\001\002\000\006\063\u0110\065\uffea\001" +
    "\002\000\004\065\uffeb\001\002\000\030\004\uffec\025\uffec" +
    "\031\uffec\034\uffec\036\uffec\037\uffec\040\uffec\044\uffec\045" +
    "\uffec\056\uffec\057\uffec\001\002\000\004\060\u011e\001\002" +
    "\000\030\004\ufffa\025\ufffa\034\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\044\ufffa\045\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002" +
    "\000\022\003\u0121\011\u0120\012\u0123\013\u0126\014\u0124\015" +
    "\u0122\016\u0125\061\u011f\001\002\000\004\062\u0134\001\002" +
    "\000\004\062\u0132\001\002\000\004\062\u0131\001\002\000" +
    "\004\062\u012f\001\002\000\004\062\u012d\001\002\000\004" +
    "\062\u012b\001\002\000\004\062\u0129\001\002\000\004\062" +
    "\u0127\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\ufff3\025\ufff3\034\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\044\ufff3\045\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\ufff4\025\ufff4\034\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\044\ufff4\045\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\ufff7\025\ufff7\034\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\044\ufff7\045\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\ufff8\025\ufff8\034\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\044\ufff8\045\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\ufff6\025\ufff6\034\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\044\ufff6\045\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\001\002\000\030\004\ufff2\025\ufff2\034\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\044\ufff2\045\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\ufff5\025\ufff5\034\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\001\002\000\030\004\u011c\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\ufff9\025\ufff9\034\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\044\ufff9\045\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\005\013" +
    "\011\014\001\001\000\004\004\u011c\001\001\000\004\006" +
    "\u010d\001\001\000\004\035\372\001\001\000\006\005\361" +
    "\011\362\001\001\000\006\003\350\011\351\001\001\000" +
    "\002\001\001\000\004\012\017\001\001\000\002\001\001" +
    "\000\004\011\343\001\001\000\002\001\001\000\004\010" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\030\001\001\000\002\001\001\000\030\003\052\005\033" +
    "\015\051\016\046\017\034\022\036\023\042\025\043\026" +
    "\047\027\044\030\045\001\001\000\002\001\001\000\024" +
    "\003\314\016\313\017\034\022\036\023\042\025\043\026" +
    "\047\027\044\030\045\001\001\000\022\016\312\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\022\016\256\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\171\017\034\022\036\023\042\025\043\026\047\027" +
    "\044\030\045\001\001\000\022\016\170\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\022\016\167\017\034\022\036\023\042\025\043\026\047" +
    "\027\044\030\045\001\001\000\022\016\166\017\034\022" +
    "\036\023\042\025\043\026\047\027\044\030\045\001\001" +
    "\000\002\001\001\000\022\016\165\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\053\016\054\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\022\016\055\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\065\026\071\031\072\034\077\001\001\000\002" +
    "\001\001\000\012\024\155\026\071\031\072\034\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\101\026\071\031\072\034\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\105\026\071\031\072\034\077\001\001" +
    "\000\004\014\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\115" +
    "\026\071\031\072\034\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\117\001\001\000\004\010\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\123\001\001\000\002\001\001\000\004" +
    "\013\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\145\026\071\031\072\034\077\001\001\000\012\024" +
    "\143\026\071\031\072\034\077\001\001\000\012\024\141" +
    "\026\071\031\072\034\077\001\001\000\002\001\001\000" +
    "\012\024\137\026\071\031\072\034\077\001\001\000\004" +
    "\032\140\001\001\000\002\001\001\000\004\032\142\001" +
    "\001\000\002\001\001\000\004\032\144\001\001\000\002" +
    "\001\001\000\004\032\146\001\001\000\002\001\001\000" +
    "\012\024\150\026\071\031\072\034\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\153\017\034\022" +
    "\036\023\042\025\043\026\047\027\044\030\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\160\026\071\031\072\034\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\163\017\034\022\036\023\042\025\043\026\047\027\044" +
    "\030\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\173\026\071\031" +
    "\072\034\077\001\001\000\004\014\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\205\026\202\034\207\001\001\000\004" +
    "\033\242\001\001\000\004\033\241\001\001\000\004\033" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\221\001\001\000\004\033\220\001\001\000\010\020" +
    "\211\026\202\034\207\001\001\000\002\001\001\000\004" +
    "\033\213\001\001\000\002\001\001\000\010\020\217\026" +
    "\202\034\207\001\001\000\010\020\216\026\202\034\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\224" +
    "\017\034\022\036\023\042\025\043\026\047\027\044\030" +
    "\045\001\001\000\004\021\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\232\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\235\017\034\022\036\023\042\025\043" +
    "\026\047\027\044\030\045\001\001\000\004\021\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\245\017\034\022\036\023\042\025\043\026\047" +
    "\027\044\030\045\001\001\000\004\021\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\252\026\071\031\072\034\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\261\026" +
    "\202\034\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\266\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\274" +
    "\017\034\022\036\023\042\025\043\026\047\027\044\030" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\305" +
    "\017\034\022\036\023\042\025\043\026\047\027\044\030" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\310\017\034\022\036\023\042\025\043\026\047\027" +
    "\044\030\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\315\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\331" +
    "\001\001\000\002\001\001\000\030\003\052\005\033\015" +
    "\333\016\046\017\034\022\036\023\042\025\043\026\047" +
    "\027\044\030\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\052\005\033\015\341\016\046\017\034\022" +
    "\036\023\042\025\043\026\047\027\044\030\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\346\017\034\022\036\023\042" +
    "\025\043\026\047\027\044\030\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\355\001\001\000\002" +
    "\001\001\000\022\016\353\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\357\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\366\001\001\000\002\001\001\000\022\016\364\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\370\017\034\022\036\023\042\025\043\026" +
    "\047\027\044\030\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u010b\001\001\000\004\040\u0109\001" +
    "\001\000\002\001\001\000\004\010\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\052\005\033\015" +
    "\u0101\016\046\017\034\022\036\023\042\025\043\026\047" +
    "\027\044\030\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0104\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\052\005\033\015\u0107\016\046\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0115\001\001\000" +
    "\002\001\001\000\004\006\u0117\001\001\000\002\001\001" +
    "\000\004\007\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0127\001\001\000" +
    "\002\001\001\000\004\004\u0129\001\001\000\002\001\001" +
    "\000\004\004\u012b\001\001\000\002\001\001\000\004\004" +
    "\u012d\001\001\000\002\001\001\000\004\004\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0132\001" +
    "\001\000\002\001\001\000\004\004\u0134\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" : "+message);
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);            
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
            //m.append("\n" + "Token: " + s.value);
        }
        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM IDENTIFIER globals constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM IDENTIFIER globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROGRAM IDENTIFIER functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.report_error("Error, palabra reservada PROGRAM no encontrada", e); 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants_body ::= IDENTIFIER EQUAL LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constants_body ::= IDENTIFIER EQUAL INTEGER_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= IDENTIFIER EQUAL STRING_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_body ::= IDENTIFIER EQUAL CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constants_body ::= IDENTIFIER EQUAL FLOATING_POINT_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constants_body ::= IDENTIFIER EQUAL NUMERIC_CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constants_body ::= IDENTIFIER EQUAL SCIENTIFIC_NOTATION_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constants_body ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error al declarar una constante", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // globals_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globals_body ::= IDENTIFIER globals_list COLON Type SEMI globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globals_body ::= IDENTIFIER globals_list COLON error SEMI globals_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Tipo no existe", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // globals_body ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                  parser.report_error("Error en VAR", e); 
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // globals_list ::= COMMA IDENTIFIER globals_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // functions ::= FUNCTION function_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // functions ::= PROCEDURE procedure_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // functions ::= FUNCTION error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               parser.report_error("Error al declarar la funcion", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                                               parser.report_error("Error al declarar procedimiento", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functions ::= PROCEDURE error NT$0 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER error CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        parser.report_error("Error en los argumentos de la funcion", e); 
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN error END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        parser.report_error("Error en el cuerpo de la funcion", e); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter_list ::= COMMA Type IDENTIFIER parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter_list ::= COMMA error IDENTIFIER parameter_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    parser.report_error("No especificado el tipo de un parametro", e); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_body ::= constants globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_body ::= globals constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_body ::= globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_body ::= constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_body ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statements ::= while_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statements ::= for_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statements ::= fun_call statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statements ::= read statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statements ::= write statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_statement ::= IF OPEN_PARENTHESIS error CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                               parser.report_error("Error en la condicion IF", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_statement ::= IF error CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                               parser.report_error("Error en la condicion IF, falta parentesis", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               parser.report_error("Error en la condicion IF, falta parentesis", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= IDENTIFIER cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= TRUE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= FALSE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= literal cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= fun_call cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond2 ::= BOOLEAN_OPERATOR cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond2 ::= EQUAL cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else_statement ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while_statement ::= WHILE error DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                                                           parser.report_error("Error en la condicion en WHILE", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_statement ::= WHILE OPEN_PARENTHESIS error CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                           parser.report_error("Error en la condicion en WHILE", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                           parser.report_error("Error en statements en WHILE", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                           parser.report_error("Error en WHILE", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // while_statement ::= WHILE error CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                           parser.report_error("Error en la condicion en WHILE, falta parentesis", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_statement ::= FOR IDENTIFIER exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int EQUALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int EQUALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object EQUAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_statement ::= FOR error TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 parser.report_error("Debe de asignar un valor", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_statement ::= FOR error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en el FOR", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp ::= exp1 exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp1 ::= ARITHMETICOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp1 ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp1 ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp1 ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp1 ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp1 ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp1 ::= MINUSOP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp2 ::= BOOLEAN_OPERATOR exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp2 ::= ARITHMETICOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp2 ::= EQUAL exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp2 ::= MINUSOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exp2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // fun_call ::= IDENTIFIER error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // fun_call ::= IDENTIFIER error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en los parametros al llamar la funcion", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameter_list_call ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter_list_call ::= COMMA exp parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment ::= IDENTIFIER COLON EQUAL exp SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignment ::= IDENTIFIER COLON EQUAL error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    parser.report_error("Error en la asignacion", e); 
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // read ::= READ OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // write ::= WRITE OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

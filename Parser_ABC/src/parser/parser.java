
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\012\000\002\002\004\000\002\002" +
    "\012\000\002\003\002\000\002\003\004\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\006\000\002\004\002\000\002\005\002\000\002\005" +
    "\004\000\002\006\010\000\002\006\010\000\002\007\005" +
    "\000\002\007\002\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\002\000\002\012\013\000\002\012" +
    "\013\000\002\012\013\000\002\035\013\000\002\013\006" +
    "\000\002\013\006\000\002\013\002\000\002\015\006\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\002\000\002\017\012\000\002\017\012" +
    "\000\002\020\004\000\002\020\006\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\033\004\000\002\033\002\000\002\021\004\000\002\021" +
    "\002\000\002\022\012\000\002\022\010\000\002\023\013" +
    "\000\002\023\012\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\024\004\000\002\031\003\000\002\031" +
    "\004\000\002\031\005\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\004\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\002" +
    "\000\002\025\007\000\002\026\007\000\002\026\005\000" +
    "\002\014\002\000\002\014\005\000\002\025\006\000\002" +
    "\025\007\000\002\027\010\000\002\027\005\000\002\030" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\006\003\005\023\006\001\002\000\004\002" +
    "\370\001\002\000\004\004\361\001\002\000\004\004\007" +
    "\001\002\000\014\025\ufffe\031\010\037\ufffe\044\ufffe\055" +
    "\ufffe\001\002\000\026\004\327\025\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\044\ufff4\045\ufff4\055\ufff4\056\ufff4\057\ufff4\001" +
    "\002\000\012\025\ufff3\037\ufff3\044\ufff3\055\012\001\002" +
    "\000\004\004\313\001\002\000\010\025\uffe7\037\016\044" +
    "\014\001\002\000\004\004\300\001\002\000\004\025\274" +
    "\001\002\000\006\003\017\004\021\001\002\000\004\034" +
    "\273\001\002\000\010\025\uffe7\037\016\044\014\001\002" +
    "\000\004\017\022\001\002\000\010\030\025\041\026\050" +
    "\023\001\002\000\006\004\uffeb\062\uffeb\001\002\000\004" +
    "\004\027\001\002\000\006\004\uffec\062\uffec\001\002\000" +
    "\006\004\uffed\062\uffed\001\002\000\010\003\031\020\uffe0" +
    "\063\030\001\002\000\012\003\265\030\025\041\026\050" +
    "\023\001\002\000\004\020\260\001\002\000\004\020\033" +
    "\001\002\000\004\025\034\001\002\000\024\003\035\004" +
    "\ufffe\031\010\036\ufffe\040\ufffe\045\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\001\002\000\004\034\257\001\002\000\020\004" +
    "\ufff3\036\ufff3\040\ufff3\045\ufff3\055\012\056\ufff3\057\ufff3" +
    "\001\002\000\004\034\040\001\002\000\010\025\uffe6\037" +
    "\uffe6\044\uffe6\001\002\000\016\004\054\036\047\040\051" +
    "\045\042\056\043\057\053\001\002\000\004\017\251\001" +
    "\002\000\006\003\235\017\236\001\002\000\022\004\054" +
    "\033\uffd7\034\uffd7\036\047\040\051\045\042\056\043\057" +
    "\053\001\002\000\010\004\uffd9\033\uffd9\034\uffd9\001\002" +
    "\000\022\004\054\033\uffd7\034\uffd7\036\047\040\051\045" +
    "\042\056\043\057\053\001\002\000\006\003\214\004\215" +
    "\001\002\000\004\004\212\001\002\000\004\017\145\001" +
    "\002\000\022\004\054\033\uffd7\034\uffd7\036\047\040\051" +
    "\045\042\056\043\057\053\001\002\000\004\017\137\001" +
    "\002\000\006\017\062\065\063\001\002\000\022\004\054" +
    "\033\uffd7\034\uffd7\036\047\040\051\045\042\056\043\057" +
    "\053\001\002\000\022\004\054\033\uffd7\034\uffd7\036\047" +
    "\040\051\045\042\056\043\057\053\001\002\000\010\004" +
    "\uffd8\033\uffd8\034\uffd8\001\002\000\010\004\uffde\033\uffde" +
    "\034\uffde\001\002\000\010\004\uffdd\033\uffdd\034\uffdd\001" +
    "\002\000\034\004\102\007\101\011\067\012\073\013\065" +
    "\014\072\015\103\016\100\017\104\020\131\035\074\053" +
    "\071\064\066\001\002\000\004\060\064\001\002\000\034" +
    "\003\077\004\102\007\101\011\067\012\073\013\065\014" +
    "\072\015\103\016\100\017\104\035\074\053\071\064\066" +
    "\001\002\000\044\004\uffb8\005\uffb8\007\uffb8\020\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\036\uffb8\040\uffb8\045\uffb8\052\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\064\uffb8\001" +
    "\002\000\032\004\102\007\101\011\067\012\073\013\065" +
    "\014\072\015\103\016\100\017\104\035\074\053\071\064" +
    "\066\001\002\000\044\004\uffba\005\uffba\007\uffba\020\uffba" +
    "\032\uffba\033\uffba\034\uffba\036\uffba\040\uffba\045\uffba\052" +
    "\uffba\056\uffba\057\uffba\060\uffba\062\uffba\063\uffba\064\uffba" +
    "\001\002\000\024\004\uffa8\033\uffa8\034\uffa8\036\uffa8\040" +
    "\uffa8\045\uffa8\056\uffa8\057\uffa8\062\126\001\002\000\044" +
    "\004\uffbc\005\uffbc\007\uffbc\020\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\036\uffbc\040\uffbc\045\uffbc\052\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000\044\004" +
    "\uffb7\005\uffb7\007\uffb7\020\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\036\uffb7\040\uffb7\045\uffb7\052\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000\044\004\uffb9" +
    "\005\uffb9\007\uffb9\020\uffb9\032\uffb9\033\uffb9\034\uffb9\036" +
    "\uffb9\040\uffb9\045\uffb9\052\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\001\002\000\044\004\uffbb\005" +
    "\uffbb\007\uffbb\020\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb" +
    "\040\uffbb\045\uffbb\052\uffbb\056\uffbb\057\uffbb\060\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\001\002\000\044\004\uffb4\005\uffb4" +
    "\007\uffb4\020\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\040" +
    "\uffb4\045\uffb4\052\uffb4\056\uffb4\057\uffb4\060\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\001\002\000\044\004\uffae\005\115\007" +
    "\111\020\uffae\032\uffae\033\uffae\034\uffae\036\uffae\040\uffae" +
    "\045\uffae\052\uffae\056\uffae\057\uffae\060\113\062\uffae\063" +
    "\uffae\064\112\001\002\000\004\062\110\001\002\000\044" +
    "\004\uffb6\005\uffb6\007\uffb6\020\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\036\uffb6\040\uffb6\045\uffb6\052\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000\004\004" +
    "\107\001\002\000\046\004\uffbf\005\uffbf\007\uffbf\017\062" +
    "\020\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\040\uffbf\045" +
    "\uffbf\052\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\001\002\000\044\004\uffb5\005\uffb5\007\uffb5\020" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\040\uffb5\045\uffb5" +
    "\052\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\001\002\000\032\004\102\007\101\011\067\012\073" +
    "\013\065\014\072\015\103\016\100\017\104\035\074\053" +
    "\071\064\066\001\002\000\004\020\106\001\002\000\044" +
    "\004\uffbd\005\uffbd\007\uffbd\020\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\036\uffbd\040\uffbd\045\uffbd\052\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\044\004" +
    "\uffbe\005\uffbe\007\uffbe\020\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\036\uffbe\040\uffbe\045\uffbe\052\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\022\004\uffa7" +
    "\033\uffa7\034\uffa7\036\uffa7\040\uffa7\045\uffa7\056\uffa7\057" +
    "\uffa7\001\002\000\032\004\102\007\101\011\067\012\073" +
    "\013\065\014\072\015\103\016\100\017\104\035\074\053" +
    "\071\064\066\001\002\000\032\004\102\007\101\011\067" +
    "\012\073\013\065\014\072\015\103\016\100\017\104\035" +
    "\074\053\071\064\066\001\002\000\032\004\102\007\101" +
    "\011\067\012\073\013\065\014\072\015\103\016\100\017" +
    "\104\035\074\053\071\064\066\001\002\000\044\004\uffc0" +
    "\005\uffc0\007\uffc0\020\uffc0\032\uffc0\033\uffc0\034\uffc0\036" +
    "\uffc0\040\uffc0\045\uffc0\052\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\001\002\000\032\004\102\007" +
    "\101\011\067\012\073\013\065\014\072\015\103\016\100" +
    "\017\104\035\074\053\071\064\066\001\002\000\044\004" +
    "\uffae\005\115\007\111\020\uffae\032\uffae\033\uffae\034\uffae" +
    "\036\uffae\040\uffae\045\uffae\052\uffae\056\uffae\057\uffae\060" +
    "\113\062\uffae\063\uffae\064\112\001\002\000\044\004\uffb2" +
    "\005\uffb2\007\uffb2\020\uffb2\032\uffb2\033\uffb2\034\uffb2\036" +
    "\uffb2\040\uffb2\045\uffb2\052\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\001\002\000\044\004\uffae\005" +
    "\115\007\111\020\uffae\032\uffae\033\uffae\034\uffae\036\uffae" +
    "\040\uffae\045\uffae\052\uffae\056\uffae\057\uffae\060\113\062" +
    "\uffae\063\uffae\064\112\001\002\000\044\004\uffb0\005\uffb0" +
    "\007\uffb0\020\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\040" +
    "\uffb0\045\uffb0\052\uffb0\056\uffb0\057\uffb0\060\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\001\002\000\044\004\uffae\005\115\007" +
    "\111\020\uffae\032\uffae\033\uffae\034\uffae\036\uffae\040\uffae" +
    "\045\uffae\052\uffae\056\uffae\057\uffae\060\113\062\uffae\063" +
    "\uffae\064\112\001\002\000\044\004\uffaf\005\uffaf\007\uffaf" +
    "\020\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\040\uffaf\045" +
    "\uffaf\052\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\001\002\000\044\004\uffae\005\115\007\111\020" +
    "\uffae\032\uffae\033\uffae\034\uffae\036\uffae\040\uffae\045\uffae" +
    "\052\uffae\056\uffae\057\uffae\060\113\062\uffae\063\uffae\064" +
    "\112\001\002\000\044\004\uffb1\005\uffb1\007\uffb1\020\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\036\uffb1\040\uffb1\045\uffb1\052" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\001\002\000\022\004\uffad\033\uffad\034\uffad\036\uffad\040" +
    "\uffad\045\uffad\056\uffad\057\uffad\001\002\000\044\004\uffb3" +
    "\005\uffb3\007\uffb3\020\uffb3\032\uffb3\033\uffb3\034\uffb3\036" +
    "\uffb3\040\uffb3\045\uffb3\052\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\001\002\000\006\020\uffaa\063" +
    "\132\001\002\000\044\004\uffab\005\uffab\007\uffab\020\uffab" +
    "\032\uffab\033\uffab\034\uffab\036\uffab\040\uffab\045\uffab\052" +
    "\uffab\056\uffab\057\uffab\060\uffab\062\uffab\063\uffab\064\uffab" +
    "\001\002\000\032\004\102\007\101\011\067\012\073\013" +
    "\065\014\072\015\103\016\100\017\104\035\074\053\071" +
    "\064\066\001\002\000\004\020\134\001\002\000\044\004" +
    "\uffac\005\uffac\007\uffac\020\uffac\032\uffac\033\uffac\034\uffac" +
    "\036\uffac\040\uffac\045\uffac\052\uffac\056\uffac\057\uffac\060" +
    "\uffac\062\uffac\063\uffac\064\uffac\001\002\000\006\020\uffe0" +
    "\063\030\001\002\000\004\020\uffa9\001\002\000\010\030" +
    "\025\041\026\050\023\001\002\000\004\004\141\001\002" +
    "\000\006\020\uffe0\063\030\001\002\000\004\020\143\001" +
    "\002\000\010\004\uffa4\033\uffa4\034\uffa4\001\002\000\010" +
    "\004\uffda\033\uffda\034\uffda\001\002\000\030\003\156\004" +
    "\160\011\147\012\152\013\146\014\151\015\162\016\157" +
    "\017\163\035\153\053\150\001\002\000\006\005\uffc4\020" +
    "\uffc4\001\002\000\006\005\uffc6\020\uffc6\001\002\000\006" +
    "\005\167\020\uffcd\001\002\000\006\005\uffc3\020\uffc3\001" +
    "\002\000\006\005\uffc5\020\uffc5\001\002\000\006\005\167" +
    "\020\uffcd\001\002\000\006\005\167\020\uffcd\001\002\000" +
    "\004\020\202\001\002\000\004\020\173\001\002\000\006" +
    "\005\uffc2\020\uffc2\001\002\000\010\005\167\017\062\020" +
    "\uffcd\001\002\000\006\005\167\020\uffcd\001\002\000\006" +
    "\005\uffc1\020\uffc1\001\002\000\026\004\160\011\147\012" +
    "\152\013\146\014\151\015\162\016\157\017\163\035\153" +
    "\053\150\001\002\000\004\020\165\001\002\000\006\005" +
    "\167\020\uffcd\001\002\000\004\020\uffd3\001\002\000\026" +
    "\004\160\011\147\012\152\013\146\014\151\015\162\016" +
    "\157\017\163\035\153\053\150\001\002\000\004\020\uffce" +
    "\001\002\000\004\020\uffd0\001\002\000\004\020\uffd4\001" +
    "\002\000\004\051\174\001\002\000\022\004\054\033\uffd7" +
    "\034\uffd7\036\047\040\051\045\042\056\043\057\053\001" +
    "\002\000\006\033\176\034\uffcb\001\002\000\020\004\054" +
    "\034\uffd7\036\047\040\051\045\042\056\043\057\053\001" +
    "\002\000\004\034\200\001\002\000\022\004\uffd5\033\uffd5" +
    "\034\uffd5\036\uffd5\040\uffd5\045\uffd5\056\uffd5\057\uffd5\001" +
    "\002\000\004\034\uffcc\001\002\000\004\051\203\001\002" +
    "\000\022\004\054\033\uffd7\034\uffd7\036\047\040\051\045" +
    "\042\056\043\057\053\001\002\000\006\033\176\034\uffcb" +
    "\001\002\000\004\034\206\001\002\000\022\004\uffd6\033" +
    "\uffd6\034\uffd6\036\uffd6\040\uffd6\045\uffd6\056\uffd6\057\uffd6" +
    "\001\002\000\004\020\uffcf\001\002\000\004\020\uffd1\001" +
    "\002\000\004\020\uffd2\001\002\000\004\065\063\001\002" +
    "\000\004\034\uffdf\001\002\000\004\052\225\001\002\000" +
    "\032\004\102\007\101\011\067\012\073\013\065\014\072" +
    "\015\103\016\100\017\104\035\074\053\071\064\066\001" +
    "\002\000\004\052\217\001\002\000\032\004\102\007\101" +
    "\011\067\012\073\013\065\014\072\015\103\016\100\017" +
    "\104\035\074\053\071\064\066\001\002\000\004\032\221" +
    "\001\002\000\004\025\222\001\002\000\020\004\054\034" +
    "\uffd7\036\047\040\051\045\042\056\043\057\053\001\002" +
    "\000\004\034\224\001\002\000\022\004\uffc8\033\uffc8\034" +
    "\uffc8\036\uffc8\040\uffc8\045\uffc8\056\uffc8\057\uffc8\001\002" +
    "\000\032\004\102\007\101\011\067\012\073\013\065\014" +
    "\072\015\103\016\100\017\104\035\074\053\071\064\066" +
    "\001\002\000\004\032\227\001\002\000\004\025\230\001" +
    "\002\000\020\004\054\034\uffd7\036\047\040\051\045\042" +
    "\056\043\057\053\001\002\000\004\034\232\001\002\000" +
    "\022\004\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7\045\uffc7" +
    "\056\uffc7\057\uffc7\001\002\000\010\004\uffdb\033\uffdb\034" +
    "\uffdb\001\002\000\010\004\uffdc\033\uffdc\034\uffdc\001\002" +
    "\000\004\032\245\001\002\000\026\004\160\011\147\012" +
    "\152\013\146\014\151\015\162\016\157\017\163\035\153" +
    "\053\150\001\002\000\004\020\240\001\002\000\004\032" +
    "\241\001\002\000\004\025\242\001\002\000\020\004\054" +
    "\034\uffd7\036\047\040\051\045\042\056\043\057\053\001" +
    "\002\000\004\034\244\001\002\000\022\004\uffca\033\uffca" +
    "\034\uffca\036\uffca\040\uffca\045\uffca\056\uffca\057\uffca\001" +
    "\002\000\004\025\246\001\002\000\020\004\054\034\uffd7" +
    "\036\047\040\051\045\042\056\043\057\053\001\002\000" +
    "\004\034\250\001\002\000\022\004\uffc9\033\uffc9\034\uffc9" +
    "\036\uffc9\040\uffc9\045\uffc9\056\uffc9\057\uffc9\001\002\000" +
    "\012\020\253\030\025\041\026\050\023\001\002\000\004" +
    "\004\254\001\002\000\010\004\uffa5\033\uffa5\034\uffa5\001" +
    "\002\000\004\020\255\001\002\000\022\004\054\033\uffd7" +
    "\034\uffd7\036\047\040\051\045\042\056\043\057\053\001" +
    "\002\000\010\004\uffa6\033\uffa6\034\uffa6\001\002\000\010" +
    "\025\uffe4\037\uffe4\044\uffe4\001\002\000\004\025\261\001" +
    "\002\000\022\004\ufffe\031\010\036\ufffe\040\ufffe\045\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\001\002\000\004\034\263\001" +
    "\002\000\010\025\uffe5\037\uffe5\044\uffe5\001\002\000\004" +
    "\004\270\001\002\000\004\004\266\001\002\000\006\020" +
    "\uffe0\063\030\001\002\000\004\020\uffe1\001\002\000\006" +
    "\020\uffe0\063\030\001\002\000\004\020\uffe2\001\002\000" +
    "\004\025\uffea\001\002\000\004\025\uffe8\001\002\000\020" +
    "\004\054\034\uffd7\036\047\040\051\045\042\056\043\057" +
    "\053\001\002\000\004\034\276\001\002\000\004\002\001" +
    "\001\002\000\010\025\uffe7\037\016\044\014\001\002\000" +
    "\004\017\301\001\002\000\010\030\025\041\026\050\023" +
    "\001\002\000\004\004\303\001\002\000\006\020\uffe0\063" +
    "\030\001\002\000\004\020\305\001\002\000\004\025\306" +
    "\001\002\000\022\004\ufffe\031\010\036\ufffe\040\ufffe\045" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002\000\004\034\310" +
    "\001\002\000\010\025\uffe3\037\uffe3\044\uffe3\001\002\000" +
    "\004\025\uffe9\001\002\000\024\004\ufff2\025\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\044\ufff2\045\ufff2\056\ufff2\057\ufff2\001" +
    "\002\000\006\063\314\065\uffee\001\002\000\004\004\325" +
    "\001\002\000\004\065\316\001\002\000\012\003\320\030" +
    "\025\041\026\050\023\001\002\000\004\062\323\001\002" +
    "\000\004\062\321\001\002\000\004\004\313\001\002\000" +
    "\024\004\ufff0\025\ufff0\036\ufff0\037\ufff0\040\ufff0\044\ufff0" +
    "\045\ufff0\056\ufff0\057\ufff0\001\002\000\004\004\313\001" +
    "\002\000\024\004\ufff1\025\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\044\ufff1\045\ufff1\056\ufff1\057\ufff1\001\002\000\006\063" +
    "\314\065\uffee\001\002\000\004\065\uffef\001\002\000\004" +
    "\060\331\001\002\000\026\004\ufffd\025\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\044\ufffd\045\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\001\002\000\022\003\334\011\333\012\336\013\341\014" +
    "\337\015\335\016\340\061\332\001\002\000\004\062\357" +
    "\001\002\000\004\062\355\001\002\000\004\062\354\001" +
    "\002\000\004\062\352\001\002\000\004\062\350\001\002" +
    "\000\004\062\346\001\002\000\004\062\344\001\002\000" +
    "\004\062\342\001\002\000\026\004\327\025\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\044\ufff4\045\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\001\002\000\026\004\ufff6\025\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\044\ufff6\045\ufff6\055\ufff6\056\ufff6\057\ufff6\001" +
    "\002\000\026\004\327\025\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\044\ufff4\045\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002\000" +
    "\026\004\ufff7\025\ufff7\036\ufff7\037\ufff7\040\ufff7\044\ufff7" +
    "\045\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\026\004" +
    "\327\025\ufff4\036\ufff4\037\ufff4\040\ufff4\044\ufff4\045\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\001\002\000\026\004\ufffa\025" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\044\ufffa\045\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\001\002\000\026\004\327\025\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\044\ufff4\045\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\001\002\000\026\004\ufffb\025\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\044\ufffb\045\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\001\002\000\026\004\327\025\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\044\ufff4\045\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002" +
    "\000\026\004\ufff9\025\ufff9\036\ufff9\037\ufff9\040\ufff9\044" +
    "\ufff9\045\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002\000\026" +
    "\004\ufff5\025\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\001\002\000\026\004\327" +
    "\025\ufff4\036\ufff4\037\ufff4\040\ufff4\044\ufff4\045\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\001\002\000\026\004\ufff8\025\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\044\ufff8\045\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\001\002\000\026\004\327\025\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\044\ufff4\045\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\001\002\000\026\004\ufffc\025\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\044\ufffc\045\ufffc\055\ufffc\056\ufffc\057\ufffc\001" +
    "\002\000\014\025\ufffe\031\010\037\ufffe\044\ufffe\055\ufffe" +
    "\001\002\000\012\025\ufff3\037\ufff3\044\ufff3\055\012\001" +
    "\002\000\010\025\uffe7\037\016\044\014\001\002\000\004" +
    "\025\365\001\002\000\020\004\054\034\uffd7\036\047\040" +
    "\051\045\042\056\043\057\053\001\002\000\004\034\367" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\010\001\001" +
    "\000\004\004\327\001\001\000\004\005\012\001\001\000" +
    "\004\006\311\001\001\000\004\011\014\001\001\000\004" +
    "\035\276\001\001\000\002\001\001\000\004\012\017\001" +
    "\001\000\002\001\001\000\004\011\271\001\001\000\002" +
    "\001\001\000\004\010\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\031\001\001\000\004\010\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\035" +
    "\015\036\001\001\000\002\001\001\000\004\005\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\047" +
    "\017\055\022\054\023\043\025\045\026\051\027\044\030" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\233\017\055\022\054\023\043\025\045\026\051\027" +
    "\044\030\056\001\001\000\002\001\001\000\022\016\232" +
    "\017\055\022\054\023\043\025\045\026\051\027\044\030" +
    "\056\001\001\000\002\001\001\000\004\025\212\001\001" +
    "\000\002\001\001\000\022\016\143\017\055\022\054\023" +
    "\043\025\045\026\051\027\044\030\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\060\017\055\022" +
    "\054\023\043\025\045\026\051\027\044\030\056\001\001" +
    "\000\022\016\057\017\055\022\054\023\043\025\045\026" +
    "\051\027\044\030\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\127\026\074\031" +
    "\075\001\001\000\002\001\001\000\010\024\067\026\074" +
    "\031\075\001\001\000\002\001\001\000\010\024\126\026" +
    "\074\031\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\104\026\074" +
    "\031\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\123\026\074" +
    "\031\075\001\001\000\010\024\121\026\074\031\075\001" +
    "\001\000\010\024\117\026\074\031\075\001\001\000\002" +
    "\001\001\000\010\024\115\026\074\031\075\001\001\000" +
    "\004\032\116\001\001\000\002\001\001\000\004\032\120" +
    "\001\001\000\002\001\001\000\004\032\122\001\001\000" +
    "\002\001\001\000\004\032\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\132\001" +
    "\001\000\002\001\001\000\010\024\134\026\074\031\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\135\001\001\000\002\001\001\000\004\010\137\001\001" +
    "\000\002\001\001\000\004\013\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\154" +
    "\026\153\034\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\207\001\001\000\004\033\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\171\001\001\000\004\033\170\001\001\000" +
    "\002\001\001\000\010\020\163\026\153\034\160\001\001" +
    "\000\002\001\001\000\004\033\165\001\001\000\002\001" +
    "\001\000\010\020\167\026\153\034\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\174\017\055\022\054\023\043\025\045" +
    "\026\051\027\044\030\056\001\001\000\004\021\176\001" +
    "\001\000\022\016\200\017\055\022\054\023\043\025\045" +
    "\026\051\027\044\030\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\203\017\055\022\054\023\043\025\045\026\051\027" +
    "\044\030\056\001\001\000\004\021\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\215\026\074\031\075\001" +
    "\001\000\002\001\001\000\010\024\217\026\074\031\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\222\017\055\022\054\023\043\025\045\026\051\027\044" +
    "\030\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\225\026\074\031\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\230\017\055\022\054\023" +
    "\043\025\045\026\051\027\044\030\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\236\026\153\034\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\242\017\055\022\054\023\043\025\045" +
    "\026\051\027\044\030\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\246\017\055" +
    "\022\054\023\043\025\045\026\051\027\044\030\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\255\017\055\022\054\023\043\025\045" +
    "\026\051\027\044\030\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\035\015\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\266\001\001\000\002" +
    "\001\001\000\004\013\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\274\017\055" +
    "\022\054\023\043\025\045\026\051\027\044\030\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\310" +
    "\001\001\000\002\001\001\000\004\010\301\001\001\000" +
    "\002\001\001\000\004\013\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\035\015\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\321\001\001\000\002\001" +
    "\001\000\004\006\323\001\001\000\002\001\001\000\004" +
    "\007\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\342\001\001\000\002\001\001\000\004\004" +
    "\344\001\001\000\002\001\001\000\004\004\346\001\001" +
    "\000\002\001\001\000\004\004\350\001\001\000\002\001" +
    "\001\000\004\004\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\355\001\001\000\002\001\001\000" +
    "\004\004\357\001\001\000\002\001\001\000\004\003\361" +
    "\001\001\000\004\005\362\001\001\000\004\011\363\001" +
    "\001\000\002\001\001\000\022\016\365\017\055\022\054" +
    "\023\043\025\045\026\051\027\044\030\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }







/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;
		
                                                               : parser.report_error("Error, palabra reservada program no encontrada", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constants ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constants_body ::= IDENTIFIER EQUAL LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constants_body ::= IDENTIFIER EQUAL INTEGER_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants_body ::= IDENTIFIER EQUAL STRING_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants_body ::= IDENTIFIER EQUAL CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constants_body ::= IDENTIFIER EQUAL FLOATING_POINT_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= IDENTIFIER EQUAL NUMERIC_CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_body ::= IDENTIFIER EQUAL SCIENTIFIC_NOTATION_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constants_body ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		 parser.report_error("Error al declarar una constante", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // globals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // globals_body ::= IDENTIFIER globals_list COLON Type SEMI globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globals_body ::= IDENTIFIER globals_list COLON error SEMI globals_body 
            {
              Object RESULT =null;
		 parser.report_error("Tipo no existe", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // globals_list ::= COMMA IDENTIFIER globals_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // functions ::= FUNCTION function_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // functions ::= PROCEDURE procedure_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functions ::= FUNCTION error END 
            {
              Object RESULT =null;
		
                                                               : parser.report_error("Error al declarar la funcion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER error CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                               : parser.report_error("Error en los argumentos de la funcion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN error END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                     : parser.report_error("Error en el cuerpo de la funcion", null); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_list ::= COMMA Type IDENTIFIER parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_list ::= COMMA error IDENTIFIER parameter_list 
            {
              Object RESULT =null;
		 
                                                      : parser.report_error("No especificado el tipo de un parametro", null); 
                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_body ::= constants globals statements assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statements ::= while_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statements ::= for_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statements ::= fun_call statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statements ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statements ::= write 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_statement ::= IF OPEN_PARENTHESIS error CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;
		
                                                               : parser.report_error("Error en la condicion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= IDENTIFIER cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= TRUE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= FALSE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= literal cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= fun_call cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond2 ::= BOOLEAN_OPERATOR cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_statement ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_statement ::= WHILE error DO BEGIN statements END 
            {
              Object RESULT =null;
		
                                                               : parser.report_error("Error en la condicion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_statement ::= FOR IDENTIFIER exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int EQUALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int EQUALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object EQUAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_statement ::= FOR error TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		 parser.report_error("Debe de asignar un valor", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp1 exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp1 ::= ARITHMETICOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp1 ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp1 ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp1 ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp1 ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp1 ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp1 ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp1 ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp1 ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp1 ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp1 ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp1 ::= MINUSOP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp2 ::= BOOLEAN_OPERATOR exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp2 ::= ARITHMETICOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp2 ::= EQUAL exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp2 ::= MINUSOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment ::= IDENTIFIER COLON EQUAL exp SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameter_list_call ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameter_list_call ::= COMMA exp parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignment ::= IDENTIFIER COLON EQUAL exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignment ::= IDENTIFIER COLON EQUAL error SEMI 
            {
              Object RESULT =null;
		
                                                               : parser.report_error("Error en la asignacion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // read ::= READ OPEN_PARENTHESIS Type IDENTIFIER CLOSE_PARENTHESIS statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // write ::= WRITE OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

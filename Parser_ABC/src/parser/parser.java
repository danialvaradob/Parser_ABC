
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\012\000\002\003" +
    "\002\000\002\003\004\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\002\000\002\005\002\000\002\005\004\000\002\006" +
    "\002\000\002\006\010\000\002\006\010\000\002\007\005" +
    "\000\002\007\002\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\002\000\002\012\012\000\002\012" +
    "\015\000\002\012\013\000\002\012\013\000\002\035\013" +
    "\000\002\013\006\000\002\013\006\000\002\013\002\000" +
    "\002\015\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\002\000\002\017\012" +
    "\000\002\017\012\000\002\020\004\000\002\020\006\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\033\004\000\002\033\002\000\002\021" +
    "\004\000\002\021\002\000\002\022\012\000\002\022\010" +
    "\000\002\023\013\000\002\023\012\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\024\004\000\002\031" +
    "\003\000\002\031\004\000\002\031\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\004\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\002\000\002\026" +
    "\007\000\002\026\006\000\002\014\002\000\002\014\005" +
    "\000\002\025\007\000\002\025\007\000\002\027\007\000" +
    "\002\027\005\000\002\030\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\023\005\001\002\000\004\002\364\001" +
    "\002\000\004\004\006\001\002\000\014\025\uffff\031\007" +
    "\037\uffff\044\uffff\055\uffff\001\002\000\030\004\332\025" +
    "\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\001\002\000\012\025\ufff4\037" +
    "\ufff4\044\ufff4\055\011\001\002\000\026\004\316\025\ufff2" +
    "\034\ufff2\036\ufff2\037\ufff2\040\ufff2\044\ufff2\045\ufff2\056" +
    "\ufff2\057\ufff2\001\002\000\010\025\uffe7\037\015\044\013" +
    "\001\002\000\004\004\303\001\002\000\004\025\277\001" +
    "\002\000\006\003\016\004\020\001\002\000\004\034\276" +
    "\001\002\000\010\025\uffe7\037\015\044\013\001\002\000" +
    "\004\017\021\001\002\000\012\020\024\030\025\041\026" +
    "\050\022\001\002\000\010\004\uffeb\025\uffeb\062\uffeb\001" +
    "\002\000\004\004\255\001\002\000\004\065\027\001\002" +
    "\000\010\004\uffec\025\uffec\062\uffec\001\002\000\010\004" +
    "\uffed\025\uffed\062\uffed\001\002\000\010\030\025\041\026" +
    "\050\022\001\002\000\004\025\031\001\002\000\024\004" +
    "\uffff\031\007\034\uffff\036\uffff\040\uffff\045\uffff\055\uffff" +
    "\056\uffff\057\uffff\001\002\000\022\004\ufff4\034\ufff4\036" +
    "\ufff4\040\ufff4\045\ufff4\055\011\056\ufff4\057\ufff4\001\002" +
    "\000\004\034\034\001\002\000\010\025\uffe6\037\uffe6\044" +
    "\uffe6\001\002\000\020\004\050\034\uffd6\036\043\040\044" +
    "\045\036\056\037\057\047\001\002\000\004\017\250\001" +
    "\002\000\006\003\234\017\235\001\002\000\022\004\050" +
    "\033\uffd6\034\uffd6\036\043\040\044\045\036\056\037\057" +
    "\047\001\002\000\022\004\050\033\uffd6\034\uffd6\036\043" +
    "\040\044\045\036\056\037\057\047\001\002\000\022\004" +
    "\050\033\uffd6\034\uffd6\036\043\040\044\045\036\056\037" +
    "\057\047\001\002\000\006\003\212\004\213\001\002\000" +
    "\004\017\153\001\002\000\004\034\uffde\001\002\000\022" +
    "\004\050\033\uffd6\034\uffd6\036\043\040\044\045\036\056" +
    "\037\057\047\001\002\000\004\017\145\001\002\000\006" +
    "\017\057\065\060\001\002\000\022\004\050\033\uffd6\034" +
    "\uffd6\036\043\040\044\045\036\056\037\057\047\001\002" +
    "\000\022\004\050\033\uffd6\034\uffd6\036\043\040\044\045" +
    "\036\056\037\057\047\001\002\000\022\004\050\033\uffd6" +
    "\034\uffd6\036\043\040\044\045\036\056\037\057\047\001" +
    "\002\000\006\033\uffd7\034\uffd7\001\002\000\006\033\uffdd" +
    "\034\uffdd\001\002\000\006\033\uffdc\034\uffdc\001\002\000" +
    "\034\004\077\007\076\011\064\012\070\013\062\014\067" +
    "\015\101\016\075\017\102\020\127\035\071\053\066\064" +
    "\063\001\002\000\004\060\061\001\002\000\034\003\074" +
    "\004\077\007\076\011\064\012\070\013\062\014\067\015" +
    "\101\016\075\017\102\035\071\053\066\064\063\001\002" +
    "\000\024\005\uffc3\007\uffc3\020\uffc3\032\uffc3\052\uffc3\060" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\032\004\077" +
    "\007\076\011\064\012\070\013\062\014\067\015\101\016" +
    "\075\017\102\035\071\053\066\064\063\001\002\000\024" +
    "\005\uffc5\007\uffc5\020\uffc5\032\uffc5\052\uffc5\060\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\001\002\000\004\062\124\001\002" +
    "\000\024\005\uffbb\007\uffbb\020\uffbb\032\uffbb\052\uffbb\060" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\024\005\uffc2" +
    "\007\uffc2\020\uffc2\032\uffc2\052\uffc2\060\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\001\002\000\024\005\uffc4\007\uffc4\020\uffc4" +
    "\032\uffc4\052\uffc4\060\uffc4\062\uffc4\063\uffc4\064\uffc4\001" +
    "\002\000\024\005\uffba\007\uffba\020\uffba\032\uffba\052\uffba" +
    "\060\uffba\062\uffba\063\uffba\064\uffba\001\002\000\024\005" +
    "\uffb8\007\uffb8\020\uffb8\032\uffb8\052\uffb8\060\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\001\002\000\024\005\113\007\107\020" +
    "\uffb2\032\uffb2\052\uffb2\060\111\062\uffb2\063\uffb2\064\110" +
    "\001\002\000\004\062\106\001\002\000\024\005\uffc1\007" +
    "\uffc1\020\uffc1\032\uffc1\052\uffc1\060\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\001\002\000\004\004\105\001\002\000\026\005" +
    "\uffbe\007\uffbe\017\057\020\uffbe\032\uffbe\052\uffbe\060\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\001\002\000\024\005\uffb9\007" +
    "\uffb9\020\uffb9\032\uffb9\052\uffb9\060\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\001\002\000\024\005\uffc0\007\uffc0\020\uffc0\032" +
    "\uffc0\052\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0\001\002" +
    "\000\032\004\077\007\076\011\064\012\070\013\062\014" +
    "\067\015\101\016\075\017\102\035\071\053\066\064\063" +
    "\001\002\000\004\020\104\001\002\000\024\005\uffbc\007" +
    "\uffbc\020\uffbc\032\uffbc\052\uffbc\060\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\001\002\000\024\005\uffbd\007\uffbd\020\uffbd\032" +
    "\uffbd\052\uffbd\060\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002" +
    "\000\022\004\uffac\033\uffac\034\uffac\036\uffac\040\uffac\045" +
    "\uffac\056\uffac\057\uffac\001\002\000\032\004\077\007\076" +
    "\011\064\012\070\013\062\014\067\015\101\016\075\017" +
    "\102\035\071\053\066\064\063\001\002\000\032\004\077" +
    "\007\076\011\064\012\070\013\062\014\067\015\101\016" +
    "\075\017\102\035\071\053\066\064\063\001\002\000\032" +
    "\004\077\007\076\011\064\012\070\013\062\014\067\015" +
    "\101\016\075\017\102\035\071\053\066\064\063\001\002" +
    "\000\024\005\uffbf\007\uffbf\020\uffbf\032\uffbf\052\uffbf\060" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\032\004\077" +
    "\007\076\011\064\012\070\013\062\014\067\015\101\016" +
    "\075\017\102\035\071\053\066\064\063\001\002\000\024" +
    "\005\113\007\107\020\uffb2\032\uffb2\052\uffb2\060\111\062" +
    "\uffb2\063\uffb2\064\110\001\002\000\024\005\uffb6\007\uffb6" +
    "\020\uffb6\032\uffb6\052\uffb6\060\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\001\002\000\024\005\113\007\107\020\uffb2\032\uffb2" +
    "\052\uffb2\060\111\062\uffb2\063\uffb2\064\110\001\002\000" +
    "\024\005\uffb4\007\uffb4\020\uffb4\032\uffb4\052\uffb4\060\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\001\002\000\024\005\113\007" +
    "\107\020\uffb2\032\uffb2\052\uffb2\060\111\062\uffb2\063\uffb2" +
    "\064\110\001\002\000\024\005\uffb3\007\uffb3\020\uffb3\032" +
    "\uffb3\052\uffb3\060\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002" +
    "\000\024\005\113\007\107\020\uffb2\032\uffb2\052\uffb2\060" +
    "\111\062\uffb2\063\uffb2\064\110\001\002\000\024\005\uffb5" +
    "\007\uffb5\020\uffb5\032\uffb5\052\uffb5\060\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\001\002\000\022\004\uffad\033\uffad\034\uffad" +
    "\036\uffad\040\uffad\045\uffad\056\uffad\057\uffad\001\002\000" +
    "\024\005\uffb7\007\uffb7\020\uffb7\032\uffb7\052\uffb7\060\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\001\002\000\006\020\uffaf\063" +
    "\131\001\002\000\004\062\130\001\002\000\044\004\uffb0" +
    "\005\uffb0\007\uffb0\020\uffb0\032\uffb0\033\uffb0\034\uffb0\036" +
    "\uffb0\040\uffb0\045\uffb0\052\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\001\002\000\032\004\077\007" +
    "\076\011\064\012\070\013\062\014\067\015\101\016\075" +
    "\017\102\035\071\053\066\064\063\001\002\000\004\020" +
    "\133\001\002\000\044\004\uffb1\005\uffb1\007\uffb1\020\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\036\uffb1\040\uffb1\045\uffb1\052" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\001\002\000\006\020\uffdf\063\135\001\002\000\012\003" +
    "\140\030\025\041\026\050\022\001\002\000\004\020\uffae" +
    "\001\002\000\004\004\143\001\002\000\004\004\141\001" +
    "\002\000\006\020\uffdf\063\135\001\002\000\004\020\uffe0" +
    "\001\002\000\006\020\uffdf\063\135\001\002\000\004\020" +
    "\uffe1\001\002\000\032\004\077\007\076\011\064\012\070" +
    "\013\062\014\067\015\101\016\075\017\102\035\071\053" +
    "\066\064\063\001\002\000\006\020\uffaf\063\131\001\002" +
    "\000\004\020\150\001\002\000\004\062\151\001\002\000" +
    "\022\004\uffa9\033\uffa9\034\uffa9\036\uffa9\040\uffa9\045\uffa9" +
    "\056\uffa9\057\uffa9\001\002\000\006\033\uffd9\034\uffd9\001" +
    "\002\000\030\003\160\004\161\011\064\012\070\013\062" +
    "\014\067\015\101\016\075\017\163\035\155\053\154\001" +
    "\002\000\006\005\167\020\uffcc\001\002\000\006\005\167" +
    "\020\uffcc\001\002\000\006\005\167\020\uffcc\001\002\000" +
    "\004\020\202\001\002\000\004\020\173\001\002\000\010" +
    "\005\167\017\057\020\uffcc\001\002\000\006\005\167\020" +
    "\uffcc\001\002\000\026\004\161\011\064\012\070\013\062" +
    "\014\067\015\101\016\075\017\163\035\155\053\154\001" +
    "\002\000\004\020\165\001\002\000\006\005\167\020\uffcc" +
    "\001\002\000\004\020\uffd2\001\002\000\026\004\161\011" +
    "\064\012\070\013\062\014\067\015\101\016\075\017\163" +
    "\035\155\053\154\001\002\000\004\020\uffcd\001\002\000" +
    "\004\020\uffcf\001\002\000\004\020\uffd3\001\002\000\004" +
    "\051\174\001\002\000\022\004\050\033\uffd6\034\uffd6\036" +
    "\043\040\044\045\036\056\037\057\047\001\002\000\006" +
    "\033\176\034\uffca\001\002\000\020\004\050\034\uffd6\036" +
    "\043\040\044\045\036\056\037\057\047\001\002\000\004" +
    "\034\200\001\002\000\022\004\uffd4\033\uffd4\034\uffd4\036" +
    "\uffd4\040\uffd4\045\uffd4\056\uffd4\057\uffd4\001\002\000\004" +
    "\034\uffcb\001\002\000\004\051\203\001\002\000\022\004" +
    "\050\033\uffd6\034\uffd6\036\043\040\044\045\036\056\037" +
    "\057\047\001\002\000\006\033\176\034\uffca\001\002\000" +
    "\004\034\206\001\002\000\022\004\uffd5\033\uffd5\034\uffd5" +
    "\036\uffd5\040\uffd5\045\uffd5\056\uffd5\057\uffd5\001\002\000" +
    "\004\020\uffce\001\002\000\004\020\uffd0\001\002\000\004" +
    "\020\uffd1\001\002\000\004\052\223\001\002\000\032\004" +
    "\077\007\076\011\064\012\070\013\062\014\067\015\101" +
    "\016\075\017\102\035\071\053\066\064\063\001\002\000" +
    "\004\052\215\001\002\000\032\004\077\007\076\011\064" +
    "\012\070\013\062\014\067\015\101\016\075\017\102\035" +
    "\071\053\066\064\063\001\002\000\004\032\217\001\002" +
    "\000\004\025\220\001\002\000\020\004\050\034\uffd6\036" +
    "\043\040\044\045\036\056\037\057\047\001\002\000\004" +
    "\034\222\001\002\000\022\004\uffc7\033\uffc7\034\uffc7\036" +
    "\uffc7\040\uffc7\045\uffc7\056\uffc7\057\uffc7\001\002\000\032" +
    "\004\077\007\076\011\064\012\070\013\062\014\067\015" +
    "\101\016\075\017\102\035\071\053\066\064\063\001\002" +
    "\000\004\032\225\001\002\000\004\025\226\001\002\000" +
    "\020\004\050\034\uffd6\036\043\040\044\045\036\056\037" +
    "\057\047\001\002\000\004\034\230\001\002\000\022\004" +
    "\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\045\uffc6\056\uffc6" +
    "\057\uffc6\001\002\000\006\033\uffda\034\uffda\001\002\000" +
    "\006\033\uffdb\034\uffdb\001\002\000\006\033\uffd8\034\uffd8" +
    "\001\002\000\004\032\244\001\002\000\026\004\161\011" +
    "\064\012\070\013\062\014\067\015\101\016\075\017\163" +
    "\035\155\053\154\001\002\000\004\020\237\001\002\000" +
    "\004\032\240\001\002\000\004\025\241\001\002\000\020" +
    "\004\050\034\uffd6\036\043\040\044\045\036\056\037\057" +
    "\047\001\002\000\004\034\243\001\002\000\022\004\uffc9" +
    "\033\uffc9\034\uffc9\036\uffc9\040\uffc9\045\uffc9\056\uffc9\057" +
    "\uffc9\001\002\000\004\025\245\001\002\000\020\004\050" +
    "\034\uffd6\036\043\040\044\045\036\056\037\057\047\001" +
    "\002\000\004\034\247\001\002\000\022\004\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\040\uffc8\045\uffc8\056\uffc8\057\uffc8\001" +
    "\002\000\012\020\252\030\025\041\026\050\022\001\002" +
    "\000\004\004\253\001\002\000\022\004\uffaa\033\uffaa\034" +
    "\uffaa\036\uffaa\040\uffaa\045\uffaa\056\uffaa\057\uffaa\001\002" +
    "\000\004\020\254\001\002\000\022\004\uffab\033\uffab\034" +
    "\uffab\036\uffab\040\uffab\045\uffab\056\uffab\057\uffab\001\002" +
    "\000\010\003\256\020\uffdf\063\135\001\002\000\004\020" +
    "\271\001\002\000\004\020\260\001\002\000\006\025\261" +
    "\065\262\001\002\000\004\003\267\001\002\000\010\030" +
    "\025\041\026\050\022\001\002\000\004\025\264\001\002" +
    "\000\024\004\uffff\031\007\034\uffff\036\uffff\040\uffff\045" +
    "\uffff\055\uffff\056\uffff\057\uffff\001\002\000\004\034\266" +
    "\001\002\000\010\025\uffe5\037\uffe5\044\uffe5\001\002\000" +
    "\004\034\270\001\002\000\010\025\uffe3\037\uffe3\044\uffe3" +
    "\001\002\000\004\025\272\001\002\000\024\004\uffff\031" +
    "\007\034\uffff\036\uffff\040\uffff\045\uffff\055\uffff\056\uffff" +
    "\057\uffff\001\002\000\004\034\274\001\002\000\010\025" +
    "\uffe4\037\uffe4\044\uffe4\001\002\000\004\025\uffea\001\002" +
    "\000\004\025\uffe8\001\002\000\020\004\050\034\uffd6\036" +
    "\043\040\044\045\036\056\037\057\047\001\002\000\004" +
    "\034\301\001\002\000\004\002\000\001\002\000\010\025" +
    "\uffe7\037\015\044\013\001\002\000\004\017\304\001\002" +
    "\000\010\030\025\041\026\050\022\001\002\000\004\004" +
    "\306\001\002\000\006\020\uffdf\063\135\001\002\000\004" +
    "\020\310\001\002\000\004\025\311\001\002\000\024\004" +
    "\uffff\031\007\034\uffff\036\uffff\040\uffff\045\uffff\055\uffff" +
    "\056\uffff\057\uffff\001\002\000\004\034\313\001\002\000" +
    "\010\025\uffe2\037\uffe2\044\uffe2\001\002\000\004\025\uffe9" +
    "\001\002\000\026\004\ufff3\025\ufff3\034\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\044\ufff3\045\ufff3\056\ufff3\057\ufff3\001\002" +
    "\000\006\063\317\065\uffee\001\002\000\004\004\330\001" +
    "\002\000\004\065\321\001\002\000\012\003\323\030\025" +
    "\041\026\050\022\001\002\000\004\062\326\001\002\000" +
    "\004\062\324\001\002\000\026\004\316\025\ufff2\034\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\044\ufff2\045\ufff2\056\ufff2\057" +
    "\ufff2\001\002\000\026\004\ufff0\025\ufff0\034\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\044\ufff0\045\ufff0\056\ufff0\057\ufff0\001" +
    "\002\000\026\004\316\025\ufff2\034\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\044\ufff2\045\ufff2\056\ufff2\057\ufff2\001\002\000" +
    "\026\004\ufff1\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\044\ufff1\045\ufff1\056\ufff1\057\ufff1\001\002\000\006\063" +
    "\317\065\uffee\001\002\000\004\065\uffef\001\002\000\004" +
    "\060\334\001\002\000\030\004\ufffe\025\ufffe\034\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\044\ufffe\045\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\001\002\000\022\003\337\011\336\012\341\013" +
    "\344\014\342\015\340\016\343\061\335\001\002\000\004" +
    "\062\362\001\002\000\004\062\360\001\002\000\004\062" +
    "\357\001\002\000\004\062\355\001\002\000\004\062\353" +
    "\001\002\000\004\062\351\001\002\000\004\062\347\001" +
    "\002\000\004\062\345\001\002\000\030\004\332\025\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\030\004\ufff7\025\ufff7" +
    "\034\ufff7\036\ufff7\037\ufff7\040\ufff7\044\ufff7\045\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\001\002\000\030\004\332\025\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\030\004\ufff8\025\ufff8" +
    "\034\ufff8\036\ufff8\037\ufff8\040\ufff8\044\ufff8\045\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\001\002\000\030\004\332\025\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\030\004\ufffb\025\ufffb" +
    "\034\ufffb\036\ufffb\037\ufffb\040\ufffb\044\ufffb\045\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\001\002\000\030\004\332\025\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\030\004\ufffc\025\ufffc" +
    "\034\ufffc\036\ufffc\037\ufffc\040\ufffc\044\ufffc\045\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\001\002\000\030\004\332\025\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\030\004\ufffa\025\ufffa" +
    "\034\ufffa\036\ufffa\037\ufffa\040\ufffa\044\ufffa\045\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\001\002\000\030\004\ufff6\025\ufff6" +
    "\034\ufff6\036\ufff6\037\ufff6\040\ufff6\044\ufff6\045\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\001\002\000\030\004\332\025\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\030\004\ufff9\025\ufff9" +
    "\034\ufff9\036\ufff9\037\ufff9\040\ufff9\044\ufff9\045\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\001\002\000\030\004\332\025\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\030\004\ufffd\025\ufffd" +
    "\034\ufffd\036\ufffd\037\ufffd\040\ufffd\044\ufffd\045\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\004\004\332" +
    "\001\001\000\004\005\011\001\001\000\004\006\314\001" +
    "\001\000\004\011\013\001\001\000\004\035\301\001\001" +
    "\000\002\001\001\000\004\012\016\001\001\000\002\001" +
    "\001\000\004\011\274\001\001\000\002\001\001\000\004" +
    "\010\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\027\001\001\000\002\001\001\000\006\003\031\015" +
    "\032\001\001\000\004\005\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\044\017\051\022\050\023" +
    "\040\025\041\026\045\027\037\030\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\232\017\051\022" +
    "\050\023\040\025\041\026\045\027\037\030\052\001\001" +
    "\000\022\016\231\017\051\022\050\023\040\025\041\026" +
    "\045\027\037\030\052\001\001\000\022\016\230\017\051" +
    "\022\050\023\040\025\041\026\045\027\037\030\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\151\017\051\022\050\023\040\025\041\026" +
    "\045\027\037\030\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\055\017\051\022\050\023\040\025" +
    "\041\026\045\027\037\030\052\001\001\000\022\016\054" +
    "\017\051\022\050\023\040\025\041\026\045\027\037\030" +
    "\052\001\001\000\022\016\053\017\051\022\050\023\040" +
    "\025\041\026\045\027\037\030\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\125" +
    "\026\071\031\072\034\077\001\001\000\002\001\001\000" +
    "\012\024\064\026\071\031\072\034\077\001\001\000\002" +
    "\001\001\000\012\024\124\026\071\031\072\034\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\102\026\071" +
    "\031\072\034\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\121" +
    "\026\071\031\072\034\077\001\001\000\012\024\117\026" +
    "\071\031\072\034\077\001\001\000\012\024\115\026\071" +
    "\031\072\034\077\001\001\000\002\001\001\000\012\024" +
    "\113\026\071\031\072\034\077\001\001\000\004\032\114" +
    "\001\001\000\002\001\001\000\004\032\116\001\001\000" +
    "\002\001\001\000\004\032\120\001\001\000\002\001\001" +
    "\000\004\032\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\133\026\071\031" +
    "\072\034\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\135\001\001\000\004\010\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\141\001\001\000\002\001\001\000\004\013\143\001" +
    "\001\000\002\001\001\000\012\024\145\026\071\031\072" +
    "\034\077\001\001\000\004\014\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\156\026\155\034\161\001\001\000\004\033" +
    "\210\001\001\000\004\033\207\001\001\000\004\033\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\171\001\001\000\004\033\170\001\001\000\010\020\163" +
    "\026\155\034\161\001\001\000\002\001\001\000\004\033" +
    "\165\001\001\000\002\001\001\000\010\020\167\026\155" +
    "\034\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\174\017\051" +
    "\022\050\023\040\025\041\026\045\027\037\030\052\001" +
    "\001\000\004\021\176\001\001\000\022\016\200\017\051" +
    "\022\050\023\040\025\041\026\045\027\037\030\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\203\017\051\022\050\023" +
    "\040\025\041\026\045\027\037\030\052\001\001\000\004" +
    "\021\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\213\026\071\031\072\034\077\001" +
    "\001\000\002\001\001\000\012\024\215\026\071\031\072" +
    "\034\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\220\017\051\022\050\023\040\025\041\026\045" +
    "\027\037\030\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\223\026\071\031\072\034\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\226\017" +
    "\051\022\050\023\040\025\041\026\045\027\037\030\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\235\026\155\034\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\241" +
    "\017\051\022\050\023\040\025\041\026\045\027\037\030" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\245\017\051\022\050\023\040\025" +
    "\041\026\045\027\037\030\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\262" +
    "\001\001\000\002\001\001\000\006\003\031\015\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\031\015" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\277\017\051\022" +
    "\050\023\040\025\041\026\045\027\037\030\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\313\001" +
    "\001\000\002\001\001\000\004\010\304\001\001\000\002" +
    "\001\001\000\004\013\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\031\015\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\324\001\001\000\002\001\001" +
    "\000\004\006\326\001\001\000\002\001\001\000\004\007" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\345\001\001\000\002\001\001\000\004\004\347" +
    "\001\001\000\002\001\001\000\004\004\351\001\001\000" +
    "\002\001\001\000\004\004\353\001\001\000\002\001\001" +
    "\000\004\004\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\360\001\001\000\002\001\001\000\004" +
    "\004\362\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }







/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // constants ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constants_body ::= IDENTIFIER EQUAL LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constants_body ::= IDENTIFIER EQUAL INTEGER_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constants_body ::= IDENTIFIER EQUAL STRING_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants_body ::= IDENTIFIER EQUAL CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants_body ::= IDENTIFIER EQUAL FLOATING_POINT_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constants_body ::= IDENTIFIER EQUAL NUMERIC_CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= IDENTIFIER EQUAL SCIENTIFIC_NOTATION_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_body ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		 parser.report_error("Error al declarar una constante", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // globals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // globals_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // globals_body ::= IDENTIFIER globals_list COLON Type SEMI globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globals_body ::= IDENTIFIER globals_list COLON error SEMI globals_body 
            {
              Object RESULT =null;
		 parser.report_error("Tipo no existe", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // globals_list ::= COMMA IDENTIFIER globals_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // functions ::= FUNCTION function_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // functions ::= PROCEDURE procedure_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functions ::= FUNCTION error END 
            {
              Object RESULT =null;
		
                                                               parser.report_error("Error al declarar la funcion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER error CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                               parser.report_error("Error en los argumentos de la funcion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN error END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                     parser.report_error("Error en el cuerpo de la funcion", null); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_list ::= COMMA Type IDENTIFIER parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_list ::= COMMA error IDENTIFIER parameter_list 
            {
              Object RESULT =null;
		 
                                                      parser.report_error("No especificado el tipo de un parametro", null); 
                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_body ::= constants globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statements ::= while_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statements ::= for_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statements ::= fun_call statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statements ::= read statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statements ::= write statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_statement ::= IF OPEN_PARENTHESIS error CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;
		
                                                               parser.report_error("Error en la condicion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= IDENTIFIER cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= TRUE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= FALSE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= literal cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond ::= fun_call cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond2 ::= BOOLEAN_OPERATOR cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_statement ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while_statement ::= WHILE error DO BEGIN statements END 
            {
              Object RESULT =null;
		
                                                               parser.report_error("Error en la condicion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_statement ::= FOR IDENTIFIER exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int EQUALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int EQUALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object EQUAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for_statement ::= FOR error TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		 parser.report_error("Debe de asignar un valor", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp1 exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp1 ::= ARITHMETICOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp1 ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp1 ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp1 ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp1 ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp1 ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp1 ::= MINUSOP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp2 ::= BOOLEAN_OPERATOR exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp2 ::= ARITHMETICOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp2 ::= EQUAL exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp2 ::= MINUSOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameter_list_call ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameter_list_call ::= COMMA exp parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment ::= IDENTIFIER COLON EQUAL exp SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment ::= IDENTIFIER COLON EQUAL error SEMI 
            {
              Object RESULT =null;
		
                                                               parser.report_error("Error en la asignacion", null); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // read ::= READ OPEN_PARENTHESIS Type IDENTIFIER CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // write ::= WRITE OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

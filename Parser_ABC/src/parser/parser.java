
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\012\000\002\002\004\000\002\002" +
    "\012\000\002\002\011\000\002\002\011\000\002\002\010" +
    "\000\002\002\003\000\002\003\004\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\006\000\002\004\002\000\002\005\004\000\002\006\002" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\007\005\000\002\007\002\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\002\000\002\040\002" +
    "\000\002\011\006\000\002\012\012\000\002\012\015\000" +
    "\002\012\013\000\002\012\013\000\002\035\010\000\002" +
    "\035\013\000\002\013\006\000\002\013\006\000\002\013" +
    "\002\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\002\000\002\017\012\000\002\017\012\000\002\020\004" +
    "\000\002\020\006\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\033\004\000\002" +
    "\033\002\000\002\021\004\000\002\021\002\000\002\022" +
    "\012\000\002\022\010\000\002\022\012\000\002\022\012" +
    "\000\002\023\013\000\002\023\012\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\024\004\000\002\031" +
    "\003\000\002\031\004\000\002\031\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\004\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\002\000\002\026" +
    "\010\000\002\026\006\000\002\026\007\000\002\014\002" +
    "\000\002\014\005\000\002\025\007\000\002\025\007\000" +
    "\002\027\007\000\002\027\005\000\002\030\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\006\003\005\023\006\001\002\000\004\002" +
    "\u0125\001\002\000\004\002\ufffb\001\002\000\004\004\007" +
    "\001\002\000\014\025\uffe3\031\010\037\016\044\012\055" +
    "\011\001\002\000\030\004\u010b\025\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\044\ufff1\045\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\030\004\372\025\uffef\031\uffef\034\uffef" +
    "\036\uffef\037\uffef\040\uffef\044\uffef\045\uffef\056\uffef\057" +
    "\uffef\001\002\000\006\003\350\004\351\001\002\000\012" +
    "\025\uffe3\037\016\044\012\055\011\001\002\000\012\025" +
    "\uffe3\031\010\037\016\044\012\001\002\000\004\025\322" +
    "\001\002\000\006\003\017\004\021\001\002\000\004\034" +
    "\321\001\002\000\010\025\uffe3\037\016\044\012\001\002" +
    "\000\004\017\022\001\002\000\012\020\025\030\026\041" +
    "\027\050\023\001\002\000\010\004\uffe7\025\uffe7\062\uffe7" +
    "\001\002\000\004\004\300\001\002\000\004\065\030\001" +
    "\002\000\010\004\uffe8\025\uffe8\062\uffe8\001\002\000\010" +
    "\004\uffe9\025\uffe9\062\uffe9\001\002\000\010\030\026\041" +
    "\027\050\023\001\002\000\004\025\032\001\002\000\024" +
    "\004\040\031\010\034\uffcb\036\051\040\041\045\033\055" +
    "\011\056\036\057\042\001\002\000\004\017\273\001\002" +
    "\000\022\004\040\031\010\034\uffcb\036\051\040\041\045" +
    "\033\056\036\057\042\001\002\000\022\004\040\033\uffcb" +
    "\034\uffcb\036\051\040\041\045\033\056\036\057\042\001" +
    "\002\000\006\003\243\017\244\001\002\000\022\004\040" +
    "\033\uffcb\034\uffcb\036\051\040\041\045\033\056\036\057" +
    "\042\001\002\000\006\017\104\065\234\001\002\000\004" +
    "\017\175\001\002\000\004\017\170\001\002\000\022\004" +
    "\040\033\uffcb\034\uffcb\036\051\040\041\045\033\056\036" +
    "\057\042\001\002\000\022\004\040\033\uffcb\034\uffcb\036" +
    "\051\040\041\045\033\056\036\057\042\001\002\000\022" +
    "\004\040\033\uffcb\034\uffcb\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\022\004\040\033\uffcb\034\uffcb" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\004\034\uffd3\001\002\000\022\004\040\033\uffcb\034\uffcb" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\006\003\060\004\061\001\002\000\004\034\057\001\002" +
    "\000\022\004\040\034\uffcb\036\051\040\041\045\033\055" +
    "\011\056\036\057\042\001\002\000\020\004\040\034\uffcb" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\004\034\uffd4\001\002\000\004\034\uffd7\001\002\000\010" +
    "\025\uffe0\037\uffe0\044\uffe0\001\002\000\004\052\155\001" +
    "\002\000\032\004\076\007\074\011\064\012\070\013\062" +
    "\014\067\015\100\016\075\017\101\035\071\053\066\064" +
    "\063\001\002\000\024\005\uffb6\007\uffb6\020\uffb6\032\uffb6" +
    "\052\uffb6\060\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000" +
    "\032\004\076\007\074\011\064\012\070\013\062\014\067" +
    "\015\100\016\075\017\101\035\071\053\066\064\063\001" +
    "\002\000\024\005\uffb8\007\uffb8\020\uffb8\032\uffb8\052\uffb8" +
    "\060\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000\004\052" +
    "\146\001\002\000\024\005\uffae\007\uffae\020\uffae\032\uffae" +
    "\052\uffae\060\uffae\062\uffae\063\uffae\064\uffae\001\002\000" +
    "\024\005\uffb5\007\uffb5\020\uffb5\032\uffb5\052\uffb5\060\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\001\002\000\024\005\uffb7\007" +
    "\uffb7\020\uffb7\032\uffb7\052\uffb7\060\uffb7\062\uffb7\063\uffb7" +
    "\064\uffb7\001\002\000\024\005\uffad\007\uffad\020\uffad\032" +
    "\uffad\052\uffad\060\uffad\062\uffad\063\uffad\064\uffad\001\002" +
    "\000\024\005\uffab\007\uffab\020\uffab\032\uffab\052\uffab\060" +
    "\uffab\062\uffab\063\uffab\064\uffab\001\002\000\024\005\135" +
    "\007\131\020\uffa5\032\uffa5\052\uffa5\060\133\062\uffa5\063" +
    "\uffa5\064\132\001\002\000\004\004\130\001\002\000\024" +
    "\005\uffb4\007\uffb4\020\uffb4\032\uffb4\052\uffb4\060\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\001\002\000\026\005\uffb1\007\uffb1" +
    "\017\104\020\uffb1\032\uffb1\052\uffb1\060\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\001\002\000\024\005\uffac\007\uffac\020\uffac" +
    "\032\uffac\052\uffac\060\uffac\062\uffac\063\uffac\064\uffac\001" +
    "\002\000\024\005\uffb3\007\uffb3\020\uffb3\032\uffb3\052\uffb3" +
    "\060\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002\000\032\004" +
    "\076\007\074\011\064\012\070\013\062\014\067\015\100" +
    "\016\075\017\101\035\071\053\066\064\063\001\002\000" +
    "\004\020\103\001\002\000\024\005\uffaf\007\uffaf\020\uffaf" +
    "\032\uffaf\052\uffaf\060\uffaf\062\uffaf\063\uffaf\064\uffaf\001" +
    "\002\000\036\003\106\004\076\007\074\011\064\012\070" +
    "\013\062\014\067\015\100\016\075\017\101\020\107\035" +
    "\071\053\066\064\063\001\002\000\006\020\uffa1\063\113" +
    "\001\002\000\004\020\111\001\002\000\004\062\110\001" +
    "\002\000\044\004\uffa3\005\uffa3\007\uffa3\020\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\036\uffa3\040\uffa3\045\uffa3\052\uffa3\056" +
    "\uffa3\057\uffa3\060\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002" +
    "\000\004\062\112\001\002\000\044\004\uffa2\005\uffa2\007" +
    "\uffa2\020\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2\040\uffa2" +
    "\045\uffa2\052\uffa2\056\uffa2\057\uffa2\060\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\001\002\000\032\004\076\007\074\011\064" +
    "\012\070\013\062\014\067\015\100\016\075\017\101\035" +
    "\071\053\066\064\063\001\002\000\004\020\115\001\002" +
    "\000\004\062\116\001\002\000\044\004\uffa4\005\uffa4\007" +
    "\uffa4\020\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4\040\uffa4" +
    "\045\uffa4\052\uffa4\056\uffa4\057\uffa4\060\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\001\002\000\006\020\uffd8\063\120\001\002" +
    "\000\012\003\123\030\026\041\027\050\023\001\002\000" +
    "\004\020\uffa0\001\002\000\004\004\126\001\002\000\004" +
    "\004\124\001\002\000\006\020\uffd8\063\120\001\002\000" +
    "\004\020\uffd9\001\002\000\006\020\uffd8\063\120\001\002" +
    "\000\004\020\uffda\001\002\000\024\005\uffb0\007\uffb0\020" +
    "\uffb0\032\uffb0\052\uffb0\060\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\001\002\000\032\004\076\007\074\011\064\012\070\013" +
    "\062\014\067\015\100\016\075\017\101\035\071\053\066" +
    "\064\063\001\002\000\032\004\076\007\074\011\064\012" +
    "\070\013\062\014\067\015\100\016\075\017\101\035\071" +
    "\053\066\064\063\001\002\000\032\004\076\007\074\011" +
    "\064\012\070\013\062\014\067\015\100\016\075\017\101" +
    "\035\071\053\066\064\063\001\002\000\024\005\uffb2\007" +
    "\uffb2\020\uffb2\032\uffb2\052\uffb2\060\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\001\002\000\032\004\076\007\074\011\064\012" +
    "\070\013\062\014\067\015\100\016\075\017\101\035\071" +
    "\053\066\064\063\001\002\000\024\005\135\007\131\020" +
    "\uffa5\032\uffa5\052\uffa5\060\133\062\uffa5\063\uffa5\064\132" +
    "\001\002\000\024\005\uffa9\007\uffa9\020\uffa9\032\uffa9\052" +
    "\uffa9\060\uffa9\062\uffa9\063\uffa9\064\uffa9\001\002\000\024" +
    "\005\135\007\131\020\uffa5\032\uffa5\052\uffa5\060\133\062" +
    "\uffa5\063\uffa5\064\132\001\002\000\024\005\uffa7\007\uffa7" +
    "\020\uffa7\032\uffa7\052\uffa7\060\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\001\002\000\024\005\135\007\131\020\uffa5\032\uffa5" +
    "\052\uffa5\060\133\062\uffa5\063\uffa5\064\132\001\002\000" +
    "\024\005\uffa6\007\uffa6\020\uffa6\032\uffa6\052\uffa6\060\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\001\002\000\024\005\135\007" +
    "\131\020\uffa5\032\uffa5\052\uffa5\060\133\062\uffa5\063\uffa5" +
    "\064\132\001\002\000\024\005\uffa8\007\uffa8\020\uffa8\032" +
    "\uffa8\052\uffa8\060\uffa8\062\uffa8\063\uffa8\064\uffa8\001\002" +
    "\000\032\004\076\007\074\011\064\012\070\013\062\014" +
    "\067\015\100\016\075\017\101\035\071\053\066\064\063" +
    "\001\002\000\004\032\150\001\002\000\004\025\151\001" +
    "\002\000\020\004\040\034\uffcb\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\004\034\153\001\002\000" +
    "\022\004\uffba\033\uffba\034\uffba\036\uffba\040\uffba\045\uffba" +
    "\056\uffba\057\uffba\001\002\000\024\005\uffaa\007\uffaa\020" +
    "\uffaa\032\uffaa\052\uffaa\060\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\001\002\000\032\004\076\007\074\011\064\012\070\013" +
    "\062\014\067\015\100\016\075\017\101\035\071\053\066" +
    "\064\063\001\002\000\004\032\157\001\002\000\004\025" +
    "\160\001\002\000\020\004\040\034\uffcb\036\051\040\041" +
    "\045\033\056\036\057\042\001\002\000\004\034\162\001" +
    "\002\000\022\004\uffb9\033\uffb9\034\uffb9\036\uffb9\040\uffb9" +
    "\045\uffb9\056\uffb9\057\uffb9\001\002\000\006\033\uffce\034" +
    "\uffce\001\002\000\006\033\uffcc\034\uffcc\001\002\000\006" +
    "\033\uffcd\034\uffcd\001\002\000\006\033\uffcf\034\uffcf\001" +
    "\002\000\006\033\uffd0\034\uffd0\001\002\000\032\004\076" +
    "\007\074\011\064\012\070\013\062\014\067\015\100\016" +
    "\075\017\101\035\071\053\066\064\063\001\002\000\006" +
    "\020\uffa1\063\113\001\002\000\004\020\173\001\002\000" +
    "\004\062\174\001\002\000\022\004\uff9b\033\uff9b\034\uff9b" +
    "\036\uff9b\040\uff9b\045\uff9b\056\uff9b\057\uff9b\001\002\000" +
    "\030\003\202\004\203\011\064\012\070\013\062\014\067" +
    "\015\100\016\075\017\205\035\177\053\176\001\002\000" +
    "\006\005\211\020\uffc1\001\002\000\006\005\211\020\uffc1" +
    "\001\002\000\006\005\211\020\uffc1\001\002\000\004\020" +
    "\224\001\002\000\004\020\215\001\002\000\010\005\211" +
    "\017\104\020\uffc1\001\002\000\006\005\211\020\uffc1\001" +
    "\002\000\026\004\203\011\064\012\070\013\062\014\067" +
    "\015\100\016\075\017\205\035\177\053\176\001\002\000" +
    "\004\020\207\001\002\000\006\005\211\020\uffc1\001\002" +
    "\000\004\020\uffc7\001\002\000\026\004\203\011\064\012" +
    "\070\013\062\014\067\015\100\016\075\017\205\035\177" +
    "\053\176\001\002\000\004\020\uffc2\001\002\000\004\020" +
    "\uffc4\001\002\000\004\020\uffc8\001\002\000\004\051\216" +
    "\001\002\000\022\004\040\033\uffcb\034\uffcb\036\051\040" +
    "\041\045\033\056\036\057\042\001\002\000\006\033\220" +
    "\034\uffbf\001\002\000\020\004\040\034\uffcb\036\051\040" +
    "\041\045\033\056\036\057\042\001\002\000\004\034\222" +
    "\001\002\000\022\004\uffc9\033\uffc9\034\uffc9\036\uffc9\040" +
    "\uffc9\045\uffc9\056\uffc9\057\uffc9\001\002\000\004\034\uffc0" +
    "\001\002\000\004\051\225\001\002\000\022\004\040\033" +
    "\uffcb\034\uffcb\036\051\040\041\045\033\056\036\057\042" +
    "\001\002\000\006\033\220\034\uffbf\001\002\000\004\034" +
    "\230\001\002\000\022\004\uffca\033\uffca\034\uffca\036\uffca" +
    "\040\uffca\045\uffca\056\uffca\057\uffca\001\002\000\004\020" +
    "\uffc3\001\002\000\004\020\uffc5\001\002\000\004\020\uffc6" +
    "\001\002\000\004\060\235\001\002\000\034\003\237\004" +
    "\076\007\074\011\064\012\070\013\062\014\067\015\100" +
    "\016\075\017\101\035\071\053\066\064\063\001\002\000" +
    "\004\062\241\001\002\000\004\062\240\001\002\000\022" +
    "\004\uff9e\033\uff9e\034\uff9e\036\uff9e\040\uff9e\045\uff9e\056" +
    "\uff9e\057\uff9e\001\002\000\022\004\uff9f\033\uff9f\034\uff9f" +
    "\036\uff9f\040\uff9f\045\uff9f\056\uff9f\057\uff9f\001\002\000" +
    "\006\033\uffd1\034\uffd1\001\002\000\004\032\263\001\002" +
    "\000\030\003\245\004\203\011\064\012\070\013\062\014" +
    "\067\015\100\016\075\017\205\035\177\053\176\001\002" +
    "\000\004\020\256\001\002\000\004\020\247\001\002\000" +
    "\004\032\250\001\002\000\004\025\251\001\002\000\022" +
    "\003\253\004\040\034\uffcb\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\004\034\255\001\002\000\004" +
    "\034\254\001\002\000\022\004\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\040\uffbb\045\uffbb\056\uffbb\057\uffbb\001\002\000\022" +
    "\004\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\045\uffbe\056" +
    "\uffbe\057\uffbe\001\002\000\004\032\257\001\002\000\004" +
    "\025\260\001\002\000\020\004\040\034\uffcb\036\051\040" +
    "\041\045\033\056\036\057\042\001\002\000\004\034\262" +
    "\001\002\000\022\004\uffbc\033\uffbc\034\uffbc\036\uffbc\040" +
    "\uffbc\045\uffbc\056\uffbc\057\uffbc\001\002\000\004\025\264" +
    "\001\002\000\020\004\040\034\uffcb\036\051\040\041\045" +
    "\033\056\036\057\042\001\002\000\004\034\266\001\002" +
    "\000\022\004\uffbd\033\uffbd\034\uffbd\036\uffbd\040\uffbd\045" +
    "\uffbd\056\uffbd\057\uffbd\001\002\000\006\033\uffd2\034\uffd2" +
    "\001\002\000\004\034\uffd5\001\002\000\020\004\040\034" +
    "\uffcb\036\051\040\041\045\033\056\036\057\042\001\002" +
    "\000\004\034\uffd6\001\002\000\006\004\274\020\275\001" +
    "\002\000\004\020\276\001\002\000\022\004\uff9c\033\uff9c" +
    "\034\uff9c\036\uff9c\040\uff9c\045\uff9c\056\uff9c\057\uff9c\001" +
    "\002\000\004\062\277\001\002\000\022\004\uff9d\033\uff9d" +
    "\034\uff9d\036\uff9d\040\uff9d\045\uff9d\056\uff9d\057\uff9d\001" +
    "\002\000\010\003\301\020\uffd8\063\120\001\002\000\004" +
    "\020\314\001\002\000\004\020\303\001\002\000\006\025" +
    "\304\065\305\001\002\000\004\003\312\001\002\000\010" +
    "\030\026\041\027\050\023\001\002\000\004\025\307\001" +
    "\002\000\024\004\040\031\010\034\uffcb\036\051\040\041" +
    "\045\033\055\011\056\036\057\042\001\002\000\004\034" +
    "\311\001\002\000\010\025\uffdf\037\uffdf\044\uffdf\001\002" +
    "\000\004\034\313\001\002\000\010\025\uffdd\037\uffdd\044" +
    "\uffdd\001\002\000\004\025\315\001\002\000\024\004\040" +
    "\031\010\034\uffcb\036\051\040\041\045\033\055\011\056" +
    "\036\057\042\001\002\000\004\034\317\001\002\000\010" +
    "\025\uffde\037\uffde\044\uffde\001\002\000\004\025\uffe6\001" +
    "\002\000\004\025\uffe4\001\002\000\020\004\040\034\uffcb" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\004\034\324\001\002\000\004\002\ufffc\001\002\000\010" +
    "\025\uffe3\037\016\044\012\001\002\000\004\025\327\001" +
    "\002\000\020\004\040\034\uffcb\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\004\034\331\001\002\000" +
    "\004\002\ufffd\001\002\000\004\025\333\001\002\000\020" +
    "\004\040\034\uffcb\036\051\040\041\045\033\056\036\057" +
    "\042\001\002\000\004\034\335\001\002\000\004\002\uffff" +
    "\001\002\000\010\025\uffe3\037\016\044\012\001\002\000" +
    "\004\025\340\001\002\000\020\004\040\034\uffcb\036\051" +
    "\040\041\045\033\056\036\057\042\001\002\000\004\034" +
    "\342\001\002\000\004\002\ufffe\001\002\000\004\025\344" +
    "\001\002\000\020\004\040\034\uffcb\036\051\040\041\045" +
    "\033\056\036\057\042\001\002\000\004\034\346\001\002" +
    "\000\004\002\001\001\002\000\010\025\uffe3\037\016\044" +
    "\012\001\002\000\004\034\uffe2\001\002\000\004\017\352" +
    "\001\002\000\012\020\354\030\026\041\027\050\023\001" +
    "\002\000\004\004\360\001\002\000\004\025\355\001\002" +
    "\000\024\004\040\031\010\034\uffcb\036\051\040\041\045" +
    "\033\055\011\056\036\057\042\001\002\000\004\034\357" +
    "\001\002\000\010\025\uffdc\037\uffdc\044\uffdc\001\002\000" +
    "\006\020\uffd8\063\120\001\002\000\004\020\362\001\002" +
    "\000\004\025\363\001\002\000\024\004\040\031\010\034" +
    "\uffcb\036\051\040\041\045\033\055\011\056\036\057\042" +
    "\001\002\000\004\034\365\001\002\000\010\025\uffdb\037" +
    "\uffdb\044\uffdb\001\002\000\004\034\367\001\002\000\004" +
    "\025\uffe1\001\002\000\004\025\uffe5\001\002\000\030\004" +
    "\ufff0\025\ufff0\031\ufff0\034\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\044\ufff0\045\ufff0\056\ufff0\057\ufff0\001\002\000\010\003" +
    "\375\063\373\065\uffea\001\002\000\004\004\u0109\001\002" +
    "\000\004\065\u0102\001\002\000\004\065\376\001\002\000" +
    "\010\030\026\041\027\050\023\001\002\000\004\062\u0100" +
    "\001\002\000\030\004\372\025\uffef\031\uffef\034\uffef\036" +
    "\uffef\037\uffef\040\uffef\044\uffef\045\uffef\056\uffef\057\uffef" +
    "\001\002\000\030\004\uffec\025\uffec\031\uffec\034\uffec\036" +
    "\uffec\037\uffec\040\uffec\044\uffec\045\uffec\056\uffec\057\uffec" +
    "\001\002\000\012\003\u0104\030\026\041\027\050\023\001" +
    "\002\000\004\062\u0107\001\002\000\004\062\u0105\001\002" +
    "\000\030\004\372\025\uffef\031\uffef\034\uffef\036\uffef\037" +
    "\uffef\040\uffef\044\uffef\045\uffef\056\uffef\057\uffef\001\002" +
    "\000\030\004\uffed\025\uffed\031\uffed\034\uffed\036\uffed\037" +
    "\uffed\040\uffed\044\uffed\045\uffed\056\uffed\057\uffed\001\002" +
    "\000\030\004\372\025\uffef\031\uffef\034\uffef\036\uffef\037" +
    "\uffef\040\uffef\044\uffef\045\uffef\056\uffef\057\uffef\001\002" +
    "\000\030\004\uffee\025\uffee\031\uffee\034\uffee\036\uffee\037" +
    "\uffee\040\uffee\044\uffee\045\uffee\056\uffee\057\uffee\001\002" +
    "\000\006\063\373\065\uffea\001\002\000\004\065\uffeb\001" +
    "\002\000\004\060\u010d\001\002\000\030\004\ufffa\025\ufffa" +
    "\034\ufffa\036\ufffa\037\ufffa\040\ufffa\044\ufffa\045\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\001\002\000\022\003\u0110\011\u010f" +
    "\012\u0112\013\u0115\014\u0113\015\u0111\016\u0114\061\u010e\001" +
    "\002\000\004\062\u0123\001\002\000\004\062\u0121\001\002" +
    "\000\004\062\u0120\001\002\000\004\062\u011e\001\002\000" +
    "\004\062\u011c\001\002\000\004\062\u011a\001\002\000\004" +
    "\062\u0118\001\002\000\004\062\u0116\001\002\000\030\004" +
    "\u010b\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\030\004" +
    "\ufff3\025\ufff3\034\ufff3\036\ufff3\037\ufff3\040\ufff3\044\ufff3" +
    "\045\ufff3\055\ufff3\056\ufff3\057\ufff3\001\002\000\030\004" +
    "\u010b\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\030\004" +
    "\ufff4\025\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\044\ufff4" +
    "\045\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002\000\030\004" +
    "\u010b\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\030\004" +
    "\ufff7\025\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\044\ufff7" +
    "\045\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\030\004" +
    "\u010b\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\030\004" +
    "\ufff8\025\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8\044\ufff8" +
    "\045\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000\030\004" +
    "\u010b\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\030\004" +
    "\ufff6\025\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\044\ufff6" +
    "\045\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000\030\004" +
    "\ufff2\025\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\044\ufff2" +
    "\045\ufff2\055\ufff2\056\ufff2\057\ufff2\001\002\000\030\004" +
    "\u010b\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\030\004" +
    "\ufff5\025\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5" +
    "\045\ufff5\055\ufff5\056\ufff5\057\ufff5\001\002\000\030\004" +
    "\u010b\025\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\030\004" +
    "\ufff9\025\ufff9\034\ufff9\036\ufff9\037\ufff9\040\ufff9\044\ufff9" +
    "\045\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\005\013" +
    "\011\014\001\001\000\004\004\u010b\001\001\000\004\006" +
    "\370\001\001\000\004\035\346\001\001\000\006\005\335" +
    "\011\336\001\001\000\006\003\324\011\325\001\001\000" +
    "\002\001\001\000\004\012\017\001\001\000\002\001\001" +
    "\000\004\011\317\001\001\000\002\001\001\000\004\010" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\030\001\001\000\002\001\001\000\030\003\052\005\033" +
    "\015\051\016\046\017\034\022\036\023\042\025\043\026" +
    "\047\027\044\030\045\001\001\000\002\001\001\000\024" +
    "\003\270\016\267\017\034\022\036\023\042\025\043\026" +
    "\047\027\044\030\045\001\001\000\022\016\266\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\022\016\241\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\166\017\034\022\036\023\042\025\043\026\047\027" +
    "\044\030\045\001\001\000\022\016\165\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\022\016\164\017\034\022\036\023\042\025\043\026\047" +
    "\027\044\030\045\001\001\000\022\016\163\017\034\022" +
    "\036\023\042\025\043\026\047\027\044\030\045\001\001" +
    "\000\002\001\001\000\022\016\162\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\053\016\054\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\022\016\055\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\064\026\071\031\072\034\076\001\001\000\002" +
    "\001\001\000\012\024\153\026\071\031\072\034\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\101\026\071\031\072\034\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\104\026\071\031\072\034\076\001\001\000\004\014\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\116" +
    "\026\071\031\072\034\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\120\001\001" +
    "\000\004\010\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\124\001\001\000\002" +
    "\001\001\000\004\013\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\143\026\071\031\072\034\076" +
    "\001\001\000\012\024\141\026\071\031\072\034\076\001" +
    "\001\000\012\024\137\026\071\031\072\034\076\001\001" +
    "\000\002\001\001\000\012\024\135\026\071\031\072\034" +
    "\076\001\001\000\004\032\136\001\001\000\002\001\001" +
    "\000\004\032\140\001\001\000\002\001\001\000\004\032" +
    "\142\001\001\000\002\001\001\000\004\032\144\001\001" +
    "\000\002\001\001\000\012\024\146\026\071\031\072\034" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\151\017\034\022\036\023\042\025\043\026\047\027" +
    "\044\030\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\155\026\071\031\072\034" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\160\017\034\022\036\023\042\025\043\026\047\027" +
    "\044\030\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\170\026\071" +
    "\031\072\034\076\001\001\000\004\014\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\200\026\177\034\203\001\001\000\004\033\232\001" +
    "\001\000\004\033\231\001\001\000\004\033\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\213\001" +
    "\001\000\004\033\212\001\001\000\010\020\205\026\177" +
    "\034\203\001\001\000\002\001\001\000\004\033\207\001" +
    "\001\000\002\001\001\000\010\020\211\026\177\034\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\216\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\004\021\220\001\001\000\022\016\222\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\225\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\004\021\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\235\026\071\031\072\034\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\245\026\177\034\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\251\017\034\022\036\023\042\025\043\026\047\027\044" +
    "\030\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\260\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\264\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\271\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\305\001\001\000" +
    "\002\001\001\000\030\003\052\005\033\015\307\016\046" +
    "\017\034\022\036\023\042\025\043\026\047\027\044\030" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\052\005\033\015\315\016\046\017\034\022\036\023\042" +
    "\025\043\026\047\027\044\030\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\322\017\034\022\036\023\042\025\043\026" +
    "\047\027\044\030\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\331\001\001\000\002\001\001\000" +
    "\022\016\327\017\034\022\036\023\042\025\043\026\047" +
    "\027\044\030\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\333\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\342\001\001" +
    "\000\002\001\001\000\022\016\340\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\344\017\034\022\036\023\042\025\043\026\047\027\044" +
    "\030\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\367\001\001\000\004\040\365\001\001\000\002" +
    "\001\001\000\004\010\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\052\005\033\015\355\016\046" +
    "\017\034\022\036\023\042\025\043\026\047\027\044\030" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\052\005\033\015\363\016\046\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\376\001\001\000\002\001\001\000" +
    "\004\006\u0100\001\001\000\002\001\001\000\004\010\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0105\001\001\000\002\001\001\000\004\006\u0107\001\001" +
    "\000\002\001\001\000\004\007\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0116\001\001\000" +
    "\002\001\001\000\004\004\u0118\001\001\000\002\001\001" +
    "\000\004\004\u011a\001\001\000\002\001\001\000\004\004" +
    "\u011c\001\001\000\002\001\001\000\004\004\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0121\001" +
    "\001\000\002\001\001\000\004\004\u0123\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);            
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
            m.append("\n" + "Token: " + s.value);
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM IDENTIFIER globals constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM IDENTIFIER globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROGRAM IDENTIFIER functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.report_error("Error, palabra reservada PROGRAM no encontrada", RESULT); 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants_body ::= IDENTIFIER EQUAL LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constants_body ::= IDENTIFIER EQUAL INTEGER_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= IDENTIFIER EQUAL STRING_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_body ::= IDENTIFIER EQUAL CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constants_body ::= IDENTIFIER EQUAL FLOATING_POINT_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constants_body ::= IDENTIFIER EQUAL NUMERIC_CHAR_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constants_body ::= IDENTIFIER EQUAL SCIENTIFIC_NOTATION_NUMERIC_LITERAL SEMI constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constants_body ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		 parser.report_error("Error al declarar una constante", RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // globals_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globals_body ::= IDENTIFIER globals_list COLON Type SEMI globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globals_body ::= IDENTIFIER globals_list COLON error SEMI globals_body 
            {
              Object RESULT =null;
		 parser.report_error("Tipo no existe", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // globals_body ::= IDENTIFIER error COLON Type SEMI globals_body 
            {
              Object RESULT =null;
		 
                                                                    parser.report_error("Error en VAR", RESULT); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // globals_list ::= COMMA IDENTIFIER globals_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // functions ::= FUNCTION function_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // functions ::= PROCEDURE procedure_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // functions ::= FUNCTION error END 
            {
              Object RESULT =null;
		
                                                               parser.report_error("Error al declarar la funcion", RESULT); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$0 ::= 
            {
              Object RESULT =null;

                                                               parser.report_error("Error al declarar procedimiento", RESULT); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functions ::= PROCEDURE error NT$0 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER error CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        parser.report_error("Error en los argumentos de la funcion", RESULT); 
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN error END 
            {
              Object RESULT =null;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        parser.report_error("Error en el cuerpo de la funcion", RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter_list ::= COMMA Type IDENTIFIER parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter_list ::= COMMA error IDENTIFIER parameter_list 
            {
              Object RESULT =null;
		 
                    parser.report_error("No especificado el tipo de un parametro", RESULT); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_body ::= constants globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_body ::= globals constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_body ::= globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_body ::= constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_body ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statements ::= while_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statements ::= for_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statements ::= fun_call statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statements ::= read statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statements ::= write statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_statement ::= IF OPEN_PARENTHESIS error CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;
		
                                                               parser.report_error("Error en la condicion", RESULT); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond ::= IDENTIFIER cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= TRUE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= FALSE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= literal cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= fun_call cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond2 ::= BOOLEAN_OPERATOR cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_statement ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // while_statement ::= WHILE error DO BEGIN statements END 
            {
              Object RESULT =null;
		
                                                           parser.report_error("Error en la condicion", RESULT); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // while_statement ::= WHILE OPEN_PARENTHESIS error CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;
		
                                                           parser.report_error("Error en la condicion", RESULT); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN error END 
            {
              Object RESULT =null;
		
                                                           parser.report_error("Error en statements", RESULT); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // for_statement ::= FOR IDENTIFIER exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int EQUALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int EQUALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object EQUAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // for_statement ::= FOR error TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		 parser.report_error("Debe de asignar un valor", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp ::= exp1 exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp1 ::= ARITHMETICOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp1 ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp1 ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp1 ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp1 ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp1 ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp1 ::= MINUSOP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp2 ::= BOOLEAN_OPERATOR exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp2 ::= ARITHMETICOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp2 ::= EQUAL exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp2 ::= MINUSOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		 parser.report_error("Error en los parametros al llamar la funcion", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parameter_list_call ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter_list_call ::= COMMA exp parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // assignment ::= IDENTIFIER COLON EQUAL exp SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignment ::= IDENTIFIER COLON EQUAL error SEMI 
            {
              Object RESULT =null;
		
                                                               parser.report_error("Error en la asignacion", RESULT); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // read ::= READ OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // write ::= WRITE OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
